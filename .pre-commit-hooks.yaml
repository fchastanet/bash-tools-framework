---
- id: fixShebangExecutionBit
  name: fixShebangExecutionBit
  description: |
    Find all files containing a shebang and
    mark them as executable if not yet
  language: script
  entry: bin/findShebangFiles
  args: [chmod, +x]
  pass_filenames: false
  types: ["file", "shell", "text"]
  always_run: true
  stages: [pre-commit, manual]

- &FRAMEWORK_LINT
  id: frameworkLint
  name: Bash Framework Lint
  description: |
    Check if your files uses the right syntax
    for using bash-tools-framework
  language: script
  entry: bin/frameworkLint
  args:
    [--expected-warnings-count, "0", --format, plain, --theme, default-force]
  pass_filenames: false
  types: ["executable", "file", "shell", "text"]
  always_run: false
  stages: [pre-commit]

- <<: *FRAMEWORK_LINT
  id: frameworkLintGithubAction
  name: Bash Framework Lint for Github Actions
  args: [--expected-warnings-count, "0", --format, checkstyle, --theme, noColor]
  log_file: logs/frameworkLint.xml
  stages: [manual]

- id: awkLint
  name: awk Lint
  description: Lint awk files using awk.
  language: script
  entry: bin/awkLint
  args: []
  log_file: logs/awkLint.xml
  pass_filenames: false
  files: \.awk$
  always_run: false
  stages: [pre-commit, manual]

- &SHELLCHECK_LINT
  id: shellcheckLint
  name: shellcheck Lint
  description: |
    Lint bash files using shellcheck.
    Installing last version automatically
  language: script
  entry: bin/shellcheckLint
  args: [-f, tty, --xargs]
  pass_filenames: true
  files: \.sh$
  types: ["executable", "file", "shell", "text"]
  always_run: false
  stages: [pre-commit]

- <<: *SHELLCHECK_LINT
  id: shellcheckLintGithubAction
  name: shellcheck Linter for Github Actions
  args: [-f, checkstyle, --xargs]
  log_file: logs/shellcheckLint.xml
  stages: [manual]

- id: runUnitTests
  name: Run unit tests
  description: run unit test using bats in docker isolated environment
  language: script
  entry: preCommitTest.sh
  args: ["scrasnups/build:bash-tools-ubuntu-5.3", -r, src, -j, "30"]
  pass_filenames: false
  always_run: true
  require_serial: true
  stages: [pre-commit]

- id: plantuml
  name: Plantuml Converter
  description: Convert plantuml files to images
  language: script
  entry: bin/plantuml
  args: [--same-dir, -f, png, -f, svg]
  pass_filenames: true
  types: ["file", "non-executable", "plantuml", "text"]
  always_run: false
  stages: [pre-commit, manual]

- id: megalinterCheckVersion
  name: Megalinter Check Version
  description: Megalinter Check if new version is available
  language: script
  entry: bin/megalinter
  args:
    [
      --image,
      "oxsecurity/megalinter-terraform:v7.11.1",
      --check-megalinter-version,
    ]
  pass_filenames: false
  always_run: true
  stages: [pre-commit, manual]

- &MEGALINTER
  id: megalinter
  name: Megalinter
  description: use megalinter to check your project
  language: script
  entry: bin/megalinter
  args:
    [
      --image,
      "oxsecurity/megalinter-terraform:v7.11.1",
      --config-file,
      ".mega-linter-light.yml",
      --fix,
    ]
  pass_filenames: false
  require_serial: true
  always_run: true
  verbose: true
  stages: [pre-commit]

# manual stage used to select github action with megalinter full config
- <<: *MEGALINTER
  id: megalinterGithubAction
  name: Megalinter for Github Actions
  args:
    [
      --image,
      "oxsecurity/megalinter-terraform:v7.11.1",
      --config-file,
      ".mega-linter-githubAction.yml",
      --fix,
    ]
  stages: [manual]
