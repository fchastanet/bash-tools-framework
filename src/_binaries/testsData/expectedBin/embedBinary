#!/usr/bin/env bash

# Header

# convert md5 encoded back to target file
# prepend dir of target file to PATH to make
# binary available everywhere
# @params {string} targetFile $1 the file to write
# it is advised to include in the path of the target file
# the md5sum of the binFile
# @params {string} binFileMd5 $2 the md5 encoded file
Embed::extractFileFromBase64() {
  local targetFile="$1"
  local binFileMd5="$2"

  if [[ ! -f "${targetFile}" ]]; then
    mkdir -p "$(dirname "${targetFile}")"
    base64 -d >"${targetFile}" <<<"${binFileMd5}"
    chmod +x "${targetFile}"
  fi

  Env::pathPrepend "$(dirname "${targetFile}")"
}

Env::pathPrepend() {
  local arg
  for arg in "$@"; do
    if [[ -d "${arg}" && ":${PATH}:" != *":${arg}:"* ]]; then
      PATH="$(realpath "${arg}"):${PATH}"
    fi
  done
}

# FUNCTIONS

Embed::extractFile_embedFile1() {
  if [[ ! -f "${PERSISTENT_TMPDIR:-/tmp}/bin/embedFile1" ]]; then
    mkdir -p "$(dirname "${PERSISTENT_TMPDIR:-/tmp}/bin/embedFile1")"
    base64 -d >"${PERSISTENT_TMPDIR:-/tmp}/bin/embedFile1" <<<"ZW1iZWRGaWxlMQo="
    chmod "644" "${PERSISTENT_TMPDIR:-/tmp}/bin/embedFile1"
  fi
}

Embed::extractFile_embedFile1

declare -gx embed_file_embedFile1="${PERSISTENT_TMPDIR:-/tmp}/bin/embedFile1"
Embed::extractDir_embedDir() {
  if [[ ! -d "${TMPDIR:-/tmp}/embedDir" ]]; then
    mkdir -p "${TMPDIR:-/tmp}/embedDir"
    (
      cd "${TMPDIR:-/tmp}/embedDir" || exit 1
      tar -xzf <(base64 -d <<<"H4sIAAAAAAAAA+3TTQrCMBCG4Vl7ipygzbT5uYH3UOxCqBureH1TxDYbFRexFN9nM5AEMvDxVbUUZ5Po/Tg1epvPJ1Hngvq2sW1I59FpK8aXX03kOlx2Z2PkNvRv3326X6mq7k777rA99l1T6o8x4ODc6/xT2FP+Lp2rNkHF2FIL5f48/zn9zdKrYAFZ/7XUH9/1Pzz6H+j/L8zp038AAAAAAAAAAAAAANbqDgZhWmMAKAAA")
    ) || return 1
  fi
}

Embed::extractDir_embedDir

declare -gx embed_dir_embedDir="${TMPDIR:-/tmp}/embedDir"
declare -gx embed_function_EmbedUIDisplayLine="${PERSISTENT_TMPDIR:-/tmp}/bin/a0f63865058c7b5f3c15101b04c0aef6/embedUIDisplayLine"
declare -gx encoded_binary_file_EmbedUIDisplayLine=""

Embed::extractFileFromBase64 \
  "${embed_function_EmbedUIDisplayLine}" \
  "${encoded_binary_file_EmbedUIDisplayLine}"

embedUIDisplayLine "-" 100
