@startuml "compilerFacadeDirective"
title compiler facade generation
skinparam {
  ' https://github.com/plantuml/plantuml/blob/49115dfc7d4156961e5b49a81c09b474daa79823/src/net/sourceforge/plantuml/style/FromSkinparamToStyle.java#L145
  activityDiamondBackgroundColor #AAAAAA
  activityEndColor #red
}

start

:compile scriptFile (facade directive phase);
note right: this phase occurs before compiler begin to compile the script during template evaluation

partition Compiler::Facade::facade #LightGray {

  #SpringGreen: Compiler::Facade::generate scriptFile;

  #SpringGreen:Compiler::Facade::filter scriptFile;
  switch (facade directives count?)
  case (<color:green>One facade found)
    -[#green]->
    #SpringGreen:Compiler::Facade::parse $facadeDirective
      ~~uses Compiler::Facade::assertFacadeTemplate~~
    ;
    switch (facade parse result?)
    case (<color:green>valid directive and template)
      partition Compiler::Facade::generateFacadeScriptFile #LightSkyBlue {
        partition Compiler::Facade::generateFacadeChoiceScript #Magenta {
          #Magenta:Compiler::Implement::mergeInterfacesFunctions;
          note right
            list all IMPLEMENT directives
            and merge all the function names
          endnote
          switch (implement?)
          case (<color:red>invalid interface)
            -[#red]->
            end
          case (<color:green>valid interface)
            -[#green]->
            #Magenta:generate switch case script\nfrom interface functions;
            note left
              generate the switch case
              to call the public functions
              of the script file using
              interfaceFunctions computed above
            endnote
          case (<color:green>no interface\n<color:green>implemented)
            -[#green]->
          endswitch
        }

        #DeepSkyBlue: Compiler::Facade::generateFacadeHeaders;
        note right
          copy back IMPLEMENT directives inside template file
          This way, the compiler will automatically check for function presence.
          Note that compiler only checks using regexp, does not check if the function
          is really accessible.
        endnote

        #DeepSkyBlue: Compiler::Facade::generateFacadeContent;
        note right
          move the script inside main function of the template file
          The script needs to be compiled before being able to know if all interface
          functions have been implemented
        endnote

        #DeepSkyBlue: Compiler::Facade::generateMainFunctionName;

        #DeepSkyBlue: export all variables;
        note right
          <color:green>The following variables will be used when the template
          <color:green>will evaluated by the compiler
          export FACADE_HEADERS_FILE
          export FACADE_CONTENT_FILE
          export FACADE_CHOICE_SCRIPT_FILE
          export MAIN_FUNCTION_NAME
          <color:red>The following variable actually overrides
          <color:red>the file variable of the compiler
          <color:red>it represents the facade template to use
          <color:red>(not really nice, part to be refactored)
          export file
        endnote
      }
      #pink:compilerContinue;
      detach
    case (<color:red>parse failed)
      -[#red]->
      end
    case (<color:red>facade directive template not found)
      -[#red]->
      end
    endswitch
  case (<color:green>no facade directive found)
    #pink:compilerContinue;
    detach
  case(<color:red>more than one\n<color:red>facade directive)
    -[#red]->
    :You can provide only one FACADE directive;
    end
  endswitch

}

partition "compilerContinue" #pink {
  :Continue normal compilation process;
  :Output result;
}

stop
@enduml
