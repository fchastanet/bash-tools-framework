@startuml "compilerRequireDirective"
title compiler require directive
skinparam {
  ' https://github.com/plantuml/plantuml/blob/49115dfc7d4156961e5b49a81c09b474daa79823/src/net/sourceforge/plantuml/style/FromSkinparamToStyle.java#L145
  activityDiamondBackgroundColor #AAAAAA
  activityEndColor #red
}

start

:compile scriptFile (require directive phase);
note right
  **first phase** occurs during importFunctions phase
  where we collect functions linked to require that
  need to be imported.
endnote

partition "compilerImportFunction" {
  :Compiler::extractUniqueFrameworkFunctions;

  partition "Compiler::Require::requires" #LightSkyBlue {

    #SpringGreen:Compiler::Require::filter scriptFile;
    while (requireDirective?) is (<color:green>require directive found)
      -[#green]->
      #SpringGreen:Compiler::Require::parse $requireDirective
        ~~uses Compiler::Require::assertInterface~~
      ;
      if (implement directive can't be parsed or function does not exist?) is (<color:red>invalid directive) then
        -[#red]->
        end
      else
        -[#green]->
      endif
      -[#green]->
      :Compiler::Require::parse;
    endwhile (no more require\ndirective to process)
  }

  :import functions from 2 previous task
  and inject them before # FUNCTIONS token;
}

-[#green,dashed]-> compiler
process
continues
;

partition "Compiler::Require::requires" #LightSkyBlue {
  note right
  **second phase**
  call again Compiler::Require::requires
  to get final list of requires in reverse order
  to add the calls to those require functions
  just after the token ~~# REQUIRES~~
  endnote
  :File::insertFileAfterToken requires "# REQUIRES";
}

partition "compilerEnds" #pink {
  :Compiler::Implement::mergeInterfacesFunctions;
  :Compiler::Implement::validateInterfaceFunctions;
  :Output result;
}

end
@enduml
