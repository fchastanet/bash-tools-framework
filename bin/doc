#!/usr/bin/env bash
###############################################################################
# GENERATED FACADE FROM https://github.com/fchastanet/bash-tools-framework/tree/master/src/_binaries/doc.sh
# DO NOT EDIT IT
###############################################################################
# shellcheck disable=SC2288,SC2034
# BIN_FILE=${FRAMEWORK_ROOT_DIR}/bin/doc
# VAR_RELATIVE_FRAMEWORK_DIR_TO_CURRENT_DIR=..
# FACADE

# ensure that no user aliases could interfere with
# commands used in this script
unalias -a || true
shopt -u expand_aliases

# shellcheck disable=SC2034
((failures = 0)) || true

# Bash will remember & return the highest exit code in a chain of pipes.
# This way you can catch the error inside pipes, e.g. mysqldump | gzip
set -o pipefail
set -o errexit

# Command Substitution can inherit errexit option since bash v4.4
shopt -s inherit_errexit || true

# a log is generated when a command fails
set -o errtrace

# use nullglob so that (file*.php) will return an empty array if no file matches the wildcard
shopt -s nullglob

# ensure regexp are interpreted without accentuated characters
export LC_ALL=POSIX

export TERM=xterm-256color

# avoid interactive install
export DEBIAN_FRONTEND=noninteractive
export DEBCONF_NONINTERACTIVE_SEEN=true

# store command arguments for later usage
export BASH_FRAMEWORK_ARGV=("$@")
export ORIGINAL_BASH_FRAMEWORK_ARGV=("$@")

# @see https://unix.stackexchange.com/a/386856
interruptManagement() {
  # restore SIGINT handler
  trap - INT
  # ensure that Ctrl-C is trapped by this script and not by sub process
  # report to the parent that we have indeed been interrupted
  kill -s INT "$$"
}
trap interruptManagement INT
SCRIPT_NAME=${0##*/}
REAL_SCRIPT_FILE="$(readlink -e "$(realpath "${BASH_SOURCE[0]}")")"
CURRENT_DIR="$(cd "$(readlink -e "${REAL_SCRIPT_FILE%/*}")" && pwd -P)"

if [[ -t 1 || -t 2 ]]; then
  # check colors applicable https://misc.flogisoft.com/bash/tip_colors_and_formatting
  export __ERROR_COLOR='\e[31m'         # Red
  export __INFO_COLOR='\e[44m'          # white on lightBlue
  export __SUCCESS_COLOR='\e[32m'       # Green
  export __WARNING_COLOR='\e[33m'       # Yellow
  export __TEST_COLOR='\e[100m'         # Light magenta
  export __TEST_ERROR_COLOR='\e[41m'    # white on red
  export __SKIPPED_COLOR='\e[33m'       # Yellow
  export __HELP_COLOR='\e[7;49;33m'     # Black on Gold
  export __DEBUG_COLOR='\e[37m'         # Grey
  export __HELP_TITLE_COLOR="\e[1;37m"  # Bold
  export __HELP_OPTION_COLOR="\e[1;34m" # Blue
  # Internal: reset color
  export __RESET_COLOR='\e[0m' # Reset Color
  # shellcheck disable=SC2155,SC2034
  export __HELP_EXAMPLE="$(echo -e "\e[1;30m")"
  # shellcheck disable=SC2155,SC2034
  export __HELP_TITLE="$(echo -e "\e[1;37m")"
  # shellcheck disable=SC2155,SC2034
  export __HELP_NORMAL="$(echo -e "\033[0m")"
else
  # check colors applicable https://misc.flogisoft.com/bash/tip_colors_and_formatting
  export __ERROR_COLOR=''
  export __INFO_COLOR=''
  export __SUCCESS_COLOR=''
  export __WARNING_COLOR=''
  export __SKIPPED_COLOR=''
  export __HELP_COLOR=''
  export __TEST_COLOR=''
  export __TEST_ERROR_COLOR=''
  export __DEBUG_COLOR=''
  # Internal: reset color
  export __RESET_COLOR=''
  export __HELP_EXAMPLE=''
  export __HELP_TITLE=''
  export __HELP_NORMAL=''
fi

################################################
# Temp dir management
################################################

KEEP_TEMP_FILES="${KEEP_TEMP_FILES:-0}"
export KEEP_TEMP_FILES

# PERSISTENT_TMPDIR is not deleted by traps
PERSISTENT_TMPDIR="${TMPDIR:-/tmp}/bash-framework"
export PERSISTENT_TMPDIR
mkdir -p "${PERSISTENT_TMPDIR}"

# shellcheck disable=SC2034
TMPDIR="$(mktemp -d -p "${PERSISTENT_TMPDIR:-/tmp}" -t bash-framework-$$-XXXXXX)"
export TMPDIR

# temp dir cleaning
cleanOnExit() {
  if [[ "${KEEP_TEMP_FILES:-0}" = "1" ]]; then
    Log::displayInfo "KEEP_TEMP_FILES=1 temp files kept here '${TMPDIR}'"
  elif [[ -n "${TMPDIR+xxx}" ]]; then
    Log::displayDebug "KEEP_TEMP_FILES=0 removing temp files '${TMPDIR}'"
    rm -Rf "${TMPDIR:-/tmp/fake}" >/dev/null 2>&1
  fi
}
trap cleanOnExit EXIT HUP QUIT ABRT TERM

# @description display help and exits if one of args is -h|--help
# @arg $1 helpArg:String|Function the help string to display or the function to call to display the help
# @arg $@ args:String[] list of options
# @option -h short help option
# @option --help long help option
# @exitcode 0 displays help and exit with code 0 if -h or --help option is in the args list
# @stdout displays help if -h or --help option is in the args list
Args::defaultHelp() {
  local helpArg=$1
  shift || true
  if ! Args::defaultHelpNoExit "${helpArg}" "$@"; then
    exit 0
  fi
}

# @description Log namespace provides 2 kind of functions
# - Log::display* allows to display given message with
#   given display level
# - Log::log* allows to log given message with
#   given log level
# Log::display* functions automatically log the message too
# @see Env::requireLoad to load the display and log level from .env file

# @description log level off
export __LEVEL_OFF=0
# @description log level error
export __LEVEL_ERROR=1
# @description log level warning
export __LEVEL_WARNING=2
# @description log level info
export __LEVEL_INFO=3
# @description log level success
export __LEVEL_SUCCESS=3
# @description log level debug
export __LEVEL_DEBUG=4

# @description verbose level off
export __VERBOSE_LEVEL_OFF=0
# @description verbose level info
export __VERBOSE_LEVEL_INFO=1
# @description verbose level info
export __VERBOSE_LEVEL_DEBUG=2
# @description verbose level info
export __VERBOSE_LEVEL_TRACE=3

# @description Display message using debug color (grey)
# @arg $1 message:String the message to display
Log::displayDebug() {
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_DEBUG)); then
    echo -e "${__DEBUG_COLOR}DEBUG   - ${1}${__RESET_COLOR}" >&2
  fi
  Log::logDebug "$1"
}

# @description Display message using info color (bg light blue/fg white)
# @arg $1 message:String the message to display
Log::displayInfo() {
  local type="${2:-INFO}"
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_INFO)); then
    echo -e "${__INFO_COLOR}${type}    - ${1}${__RESET_COLOR}" >&2
  fi
  Log::logInfo "$1" "${type}"
}

# @description fix markdown TOC generated by Markdown all in one vscode extension
# to make TOC compatible with docsify
# @arg $1 file:String file to fix
# @exitcode 1 if awk fails
# @see https://regex101.com/r/DJJf2I/1
ShellDoc::fixMarkdownToc() {
  local file="$1"
  local fixMarkdownToc

  fixMarkdownToc="$(
    cat <<'EOF'
{
  line=$0
  if (match(line, /^(\s*- \[([0-9]+\.)+ [^]]+\]\(#)([^)]+)\)/, arr)) {
    print arr[1] "_" rewrite(arr[3]) ")"
  } else {
    print line
  }
}
function rewrite(str)
{
    gsub(/-(-)+/, "-", str)
    return str
}
EOF
  )"

  awk -i inplace "${fixMarkdownToc}" "${file}"
}

# @description generates markdown file from template by
# replacing @@@command_help@@@ by the help of the command
# eg: @@@test_help@@@ will be replaced by the output
# of the command `test --help` in the directory provided
#
# @arg $1 templateFile:String the file to use as template
# @arg $2 targetFile:String the target file
# @arg $3 fromDir:String the directory from which commands will be searched
# @arg $4 tokenNotFoundCount:&int (passed by reference) number of tokens @@@command_help@@@ not found in the template file
# @arg $5 excludeFilesPattern:String grep exclude pattern (eg: '^(bash-tpl)$') (default value: "")
# @stderr diagnostics logs
# @stdout the generated markdown with help of the matching command
ShellDoc::generateMdFileFromTemplate() {
  local templateFile="$1"
  local targetFile="$2"
  local fromDir="$3"
  local -n tokenNotFoundCount=$4
  local excludeFilesPattern="${5:-}"

  local -a grepExclude
  local startTime endTime

  if [[ -z "${excludeFilesPattern}" ]]; then
    grepExclude=(cat)
  else
    grepExclude=(grep -E -v "${excludeFilesPattern}")
  fi

  cp "${templateFile}" "${targetFile}"

  startTime=$(date +%s.%3N)
  ((nbTokensGenerated = 0)) || true
  while IFS= read -r relativeFile; do
    local token="${relativeFile#./}"
    token="${token////_}"
    if grep -q "@@@${token}_help@@@" "${targetFile}"; then
      Log::displayInfo "generate help for ${token}"
      ( #
        (cd "${fromDir}" && "${relativeFile}" --help) |
          File::replaceTokenByInput "@@@${token}_help@@@" "${targetFile}"
      ) || Log::displayError "$(realpath "${fromDir}/${relativeFile}" --relative-to="${FRAMEWORK_ROOT_DIR}") --help error caught"
    else
      ((++tokenNotFoundCount))
      Log::displayWarning "token ${token} not found in ${targetFile}"
    fi
    ((nbTokensGenerated++)) || true
  done < <(cd "${fromDir}" && find . -type f -executable | "${grepExclude[@]}")
  endTime=$(date +%s.%3N)
  Log::displayInfo "${nbTokensGenerated} commands' help replaced in $(echo "scale=3; ${endTime} - ${startTime}" | bc)seconds"
}

# @description generate doc + index
# @arg $1 fromDir:String
# @arg $2 fromDirRelative:String
# @arg $3 docDir:String
# @arg $4 indexFile:String
# @arg $5 repositoryUrl:String base url for src file (eg:https://github.com/fchastanet/bash-tools-framework)
# @arg $6 excludeDirectoriesPattern:String grep exclude pattern. Eg: '/testsData|/_.*'
# @arg $7 excludeFilesPattern:String grep exclude pattern. Eg: '(/_\.sh|/ZZZ\.sh|/__all\.sh)$'
ShellDoc::generateShellDocsFromDir() {
  local fromDir="$1"
  local fromDirRelative="$2"
  local docDir="$3"
  local indexFile="$4"
  local repositoryUrl="${5:-}"
  local excludeDirectoriesPattern="${6:-}"
  local excludeFilesPattern="${7:-}"

  # exclude dir pattern
  local -a grepExclude
  if [[ -z "${excludeDirectoriesPattern}" ]]; then
    grepExclude=(cat)
  else
    grepExclude=(grep -E -v "${excludeDirectoriesPattern}")
  fi

  # generate one .md per directory
  local relativeDir
  local targetDocFile
  local targetDocFileRelative

  while IFS= read -r relativeDir; do
    relativeDir="${relativeDir#./}"
    targetDocFile="${docDir}/${relativeDir}.md"
    targetDocFileRelative="$(realpath --canonicalize-missing --relative-to "$(dirname "${indexFile}")" "${targetDocFile}")"

    mkdir -p "$(dirname "${targetDocFile}")" || true
    if ShellDoc::generateShellDocDir \
      "${fromDir}/${relativeDir}" \
      "${fromDirRelative}/${relativeDir}" \
      "${targetDocFile}" \
      "${repositoryUrl}" \
      "${excludeFilesPattern}" && [[ -n "$(tail -n +6 "${targetDocFile}")" ]]; then
      ShellDoc::appendDocToIndex "${indexFile}" "${targetDocFileRelative}" "${relativeDir}"
    else
      rm -f "${targetDocFile}" || true
      Log::displaySkipped "${fromDir}/${relativeDir} does not contain any documentation"
    fi
  done < <(cd "${fromDir}" && find . -type d -name '[^.]*' | "${grepExclude[@]}" | LC_ALL=C sort)
}

BASH_FRAMEWORK_SHDOC_INSTALLED_PATH="vendor/.shDocInstalled"
BASH_FRAMEWORK_SHDOC_CHECK_TIMEOUT=86400 # 1 day

# @description install requirements to execute shdoc
# @warning cloning is skipped if vendor/.shDocInstalled file exists
# @warning a new check is done everyday
# @warning repository is not updated if a change is detected
# @env BASH_FRAMEWORK_SHDOC_CHECK_TIMEOUT int default value 86400 (86400 seconds = 1 day)
# @set BASH_FRAMEWORK_SHDOC_INSTALLED String the file created when git clone succeeded
# @see https://github.com/fchastanet/shdoc
# @stderr diagnostics information is displayed
# @feature Git::cloneOrPullIfNoChanges
ShellDoc::installRequirementsIfNeeded() {
  local BASH_FRAMEWORK_SHDOC_INSTALLED="${FRAMEWORK_ROOT_DIR}/${BASH_FRAMEWORK_SHDOC_INSTALLED_PATH}"
  if [[ "$(
    Cache::getFileContentIfNotExpired \
      "${BASH_FRAMEWORK_SHDOC_INSTALLED}" \
      "${BASH_FRAMEWORK_SHDOC_CHECK_TIMEOUT}"
  )" != "1" ]]; then
    Log::displayInfo "Check if shdoc is up to date"
    if GIT_CLONE_OPTIONS="--recursive" Git::cloneOrPullIfNoChanges \
      "${FRAMEWORK_VENDOR_DIR:-${FRAMEWORK_ROOT_DIR}/vendor}/shdoc" \
      "https://github.com/fchastanet/shdoc.git"; then
      echo "1" >"${BASH_FRAMEWORK_SHDOC_INSTALLED}"
    else
      Log::fatal "unable to install shdoc library"
    fi
  fi
}

# @description ensure COMMAND_BIN_DIR env var is set
# and PATH correctly prepared
# @noargs
# @set COMMAND_BIN_DIR string the directory where to find this command
# @set PATH string add directory where to find this command binary
Compiler::Facade::requireCommandBinDir() {
  COMMAND_BIN_DIR="${CURRENT_DIR}"
  Env::pathPrepend "${COMMAND_BIN_DIR}"
}

# @description display help if one of args is -h|--help
# @arg $1 helpArg:String|Function the help string to display or the function to call to display the help
# @arg $@ args:String[] list of options
# @option -h short help option
# @option --help long help option
# @exitcode 1 displays help and returns with code 1 if -h or --help option is in the args list
# @stdout displays help if -h or --help option is in the args list
Args::defaultHelpNoExit() {
  local helpArg=$1
  shift || true
  # shellcheck disable=SC2034
  local args
  args="$(getopt -l help -o h -- "$@" 2>/dev/null)" || true
  eval set -- "${args}"

  while true; do
    case $1 in
      -h | --help)
        if [[ "$(type -t "${helpArg}")" = "function" ]]; then
          "${helpArg}" "$@"
        else
          Args::showHelp "${helpArg}"
        fi
        return 1
        ;;
      --)
        break
        ;;
      *)
        # ignore
        ;;
    esac
  done
}

# @description get file content if file not expired
# @arg $1 file:String the file to get content from
# @arg $2 maxDuration:int number of seconds after which the file is considered expired
# @stdout {String} the file content if not expired
# @exitcode 1 if file does not exists
# @exitcode 2 if file expired
Cache::getFileContentIfNotExpired() {
  local file="$1"
  local maxDuration="$2"

  if [[ ! -f "${file}" ]]; then
    return 1
  fi
  if (($(File::elapsedTimeSinceLastModification "${file}") > maxDuration)); then
    return 2
  fi
  cat "${file}"
}

# @description prepend directories to the PATH environment variable
# @arg $@ args:String[] list of directories to prepend
# @set PATH update PATH with the directories prepended
Env::pathPrepend() {
  local arg
  for arg in "$@"; do
    if [[ -d "${arg}" && ":${PATH}:" != *":${arg}:"* ]]; then
      PATH="$(realpath "${arg}"):${PATH}"
    fi
  done
}

# @description replace token by input(stdin) in given targetFile
# @warning special ansi codes will be removed from stdin
# @arg $1 token:String the token to replace by stdin
# @arg $2 targetFile:String the file in which token will be replaced by stdin
# @exitcode 1 if error
# @stdin the file content that will be injected in targetFile
File::replaceTokenByInput() {
  local token="$1"
  local targetFile="$2"

  (
    local tokenFile
    tokenFile="$(Framework::createTempFile "replaceTokenByInput")"

    cat - | Filters::removeAnsiCodes >"${tokenFile}"

    sed -E -i \
      -e "/${token}/r ${tokenFile}" \
      -e "/${token}/d" \
      "${targetFile}"
  )
}

# @description clone the repository if not done yet, else pull it if no change in it
# @arg $1 dir:String directory in which repository is installed or will be cloned
# @arg $2 repo:String repository url
# @arg $3 cloneCallback:Function callback on successful clone
# @arg $4 pullCallback:Function callback on successful pull
# @env GIT_CLONE_OPTIONS:String additional options to pass to git clone command
# @exitcode 0 on successful pulling/cloning, 1 on failure
Git::cloneOrPullIfNoChanges() {
  local dir="$1"
  shift || true
  local repo="$1"
  shift || true
  local cloneCallback=${1:-}
  shift || true
  local pullCallback=${1:-}
  shift || true

  if [[ -d "${dir}/.git" ]]; then
    Git::pullIfNoChanges "${dir}" && (
      # shellcheck disable=SC2086
      if [[ "$(type -t ${pullCallback})" = "function" ]]; then
        ${pullCallback} "${dir}"
      fi
    )
  else
    Log::displayInfo "cloning ${repo} ..."
    mkdir -p "$(dirname "${dir}")"
    # shellcheck disable=SC2086,SC2248
    git clone ${GIT_CLONE_OPTIONS} --progress "$@" "${repo}" "${dir}" && (
      # shellcheck disable=SC2086
      if [[ "$(type -t ${cloneCallback})" = "function" ]]; then
        ${cloneCallback} "${dir}"
      fi
    )
  fi
}

# @description Display message using error color (red)
# @arg $1 message:String the message to display
Log::displayError() {
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_ERROR)); then
    echo -e "${__ERROR_COLOR}ERROR   - ${1}${__RESET_COLOR}" >&2
  fi
  Log::logError "$1"
}

# @description Display message using skip color (yellow)
# @arg $1 message:String the message to display
Log::displaySkipped() {
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_INFO)); then
    echo -e "${__SKIPPED_COLOR}SKIPPED - ${1}${__RESET_COLOR}" >&2
  fi
  Log::logSkipped "$1"
}

# @description Display message using warning color (yellow)
# @arg $1 message:String the message to display
Log::displayWarning() {
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL >= __LEVEL_WARNING)); then
    echo -e "${__WARNING_COLOR}WARN    - ${1}${__RESET_COLOR}" >&2
  fi
  Log::logWarning "$1"
}

# @description Display message using error color (red) and exit immediately with error status 1
# @arg $1 message:String the message to display
Log::fatal() {
  echo -e "${__ERROR_COLOR}FATAL   - ${1}${__RESET_COLOR}" >&2
  Log::logFatal "$1"
  exit 1
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logDebug() {
  if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_DEBUG)); then
    Log::logMessage "${2:-DEBUG}" "$1"
  fi
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logInfo() {
  if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_INFO)); then
    Log::logMessage "${2:-INFO}" "$1"
  fi
}

# @description add reference to index file (using docsify embed feature)
# @arg $1 indexFile:String
# @arg $2 mdRelativeFile:String
# @arg $3 title:String
ShellDoc::appendDocToIndex() {
  local indexFile="$1"
  local mdRelativeFile="$2"
  local title="$3"

  (
    echo "[${title}](${mdRelativeFile} ':include')"
    echo
  ) >>"${indexFile}"
}

# @description generate shell doc file from given directory
#
# @arg $1 dir:String
# @arg $2 relativeDir:String
# @arg $3 targetDocFile:String the markdown file generated using shdoc
# @arg $4 repositoryUrl:String base url for src file (eg:https://github.com/fchastanet/bash-tools-framework)
# @arg $5 excludeFilesPattern:String grep exclude pattern. Eg: '(/_\.sh|/ZZZ\.sh|/__all\.sh)$'
# @exitcode 0 if file has been generated
# @exitcode 1 if file is empty or error
ShellDoc::generateShellDocDir() {
  local dir="$1"
  local relativeDir="$2"
  local targetDocFile="$3"
  local repositoryUrl="${4:-}"
  local excludeFilesPattern="${5:-}"
  local namespaceFile
  local relativeFile

  local -a grepExclude
  if [[ -z "${excludeFilesPattern}" ]]; then
    grepExclude=(cat)
  else
    grepExclude=(grep -E -v "${excludeFilesPattern}")
  fi

  namespaceFile="$(mktemp -p "${TMPDIR:-/tmp}" -t bash-tools-shdoc-namespace-XXXXXX)"
  Log::displayInfo "Generating ${targetDocFile} based on ${namespaceFile}"

  (
    local firstFile=1
    # generate one big sh file with all sh files of the directory
    echo '#!/usr/bin/env bash' >"${namespaceFile}"
    echo "# @name ${relativeDir}" >>"${namespaceFile}"
    while IFS= read -r relativeFile; do
      relativeFile="${relativeFile#./}"
      (
        if [[ "${firstFile}" = "1" && "${relativeFile}" != "_.sh" ]]; then
          (
            echo "# @description Directory ${relativeDir}"
            echo
          ) >>"${namespaceFile}"
        fi

        echo "# @section ${relativeDir}/${relativeFile}"
        if [[ -n "${repositoryUrl}" ]]; then
          echo "# @description [file source ${relativeDir}/${relativeFile}](${repositoryUrl}/tree/master/${relativeDir}/${relativeFile})"
        else
          echo "# @description file source ${relativeDir}/${relativeFile}"
        fi
        awk NR\>1 "${dir}/${relativeFile}" | # remove shebang
          # remove unwanted strings
          sed -E \
            -e '/^# cspell:disable$/d' \
            -e '/^# cspell:enable$/d'
      ) >>"${namespaceFile}"
      firstFile=0
    done < <(cd "${dir}" && find . -maxdepth 1 -name "*.sh" | "${grepExclude[@]}" | LC_ALL=C sort)

    local doc
    doc="$(ShellDoc::generateShellDoc "${namespaceFile}")"
    if (("$(grep -c . <<<"${doc}")" > 1)); then
      # remove index that is auto managed by docsify
      # increment title level by one (#)
      sed -E \
        -e '/^## Index/,/## /d' \
        -e 's/^(##*) (.*)$/#\1 \2/' \
        <<<"${doc}" >"${targetDocFile}"
      return 0
    else
      return 1
    fi
  )
}

# @description display help
# @arg $1 helpArg:String the help string to show
# @stdout display help arg
Args::showHelp() {
  local helpArg="$1"
  echo -e "${helpArg}"
}

# @description get number of seconds since last modification of the file
# @arg $1 file:String file path
# @exitcode 1 if file does not exist
# @stdout number of seconds since last modification of the file
File::elapsedTimeSinceLastModification() {
  local file="$1"
  if [[ ! -f "${file}" ]]; then
    return 1
  fi
  local lastModificationTimeSeconds diff
  lastModificationTimeSeconds="$(stat -c %Y "${file}")"
  ((diff = $(date +%s) - lastModificationTimeSeconds))
  echo -n "${diff}"
}

# @description remove ansi codes from input or files given as argument
# @arg $@ files:String[] the files to filter
# @exitcode * if one of the filter command fails
# @stdin you can use stdin as alternative to files argument
# @stdout the filtered content
# @see https://en.wikipedia.org/wiki/ANSI_escape_code
# shellcheck disable=SC2120
Filters::removeAnsiCodes() {
  # cspell:disable
  sed -E 's/\x1b\[[0-9;]*[mGKHF]//g' "$@"
  # cspell:enable
}

# @description create a temp file using default TMPDIR variable
# initialized in _includes/_commonHeader.sh
# @env TMPDIR String (default value /tmp)
# @arg $1 templateName:String template name to use(optional)
Framework::createTempFile() {
  mktemp -p "${TMPDIR:-/tmp}" -t "${1:-}.XXXXXXXXXXXX"
}

# @description pull git directory only if no change has been detected
# @arg $1 dir:String the git directory to pull
# @exitcode 0 on successful pulling
# @exitcode 1 on any other failure
# @exitcode 2 changes detected, pull avoided
# @exitcode 3 not a git directory
# @exitcode 4 not able to update index
# @stderr diagnostics information is displayed
# @require Git::requireGitCommand
Git::pullIfNoChanges() {
  local dir="$1"
  if [[ ! -d "${dir}/.git" ]]; then
    return 3
  fi
  (
    cd "${dir}" || exit 3
    git update-index --refresh &>/dev/null || exit 4
    if ! git diff-index --quiet HEAD --; then
      Log::displayWarning "Pulling git repository '${dir}' avoided as changes detected"
      exit 2
    fi
    Log::displayInfo "Pull git repository '${dir}' as no changes detected"
    git pull --progress
  )
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logError() {
  if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_ERROR)); then
    Log::logMessage "${2:-ERROR}" "$1"
  fi
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logFatal() {
  Log::logMessage "${2:-FATAL}" "$1"
}

# @description Internal: common log message
# @example text
#   [date]|[levelMsg]|message
#
# @example text
#   2020-01-19 19:20:21|ERROR  |log error
#   2020-01-19 19:20:21|SKIPPED|log skipped
#
# @arg $1 levelMsg:String message's level description (eg: STATUS, ERROR, ...)
# @arg $2 msg:String the message to display
# @env BASH_FRAMEWORK_LOG_FILE String log file to use, do nothing if empty
# @env BASH_FRAMEWORK_LOG_LEVEL int log level log only if > OFF or fatal messages
# @stderr diagnostics information is displayed
# @require Env::requireLoad
# @require Log::requireLoad
Log::logMessage() {
  local levelMsg="$1"
  local msg="$2"
  local date

  if [[ -n "${BASH_FRAMEWORK_LOG_FILE}" ]] && ((BASH_FRAMEWORK_LOG_LEVEL > __LEVEL_OFF)); then
    date="$(date '+%Y-%m-%d %H:%M:%S')"
    touch "${BASH_FRAMEWORK_LOG_FILE}"
    printf "%s|%7s|%s\n" "${date}" "${levelMsg}" "${msg}" >>"${BASH_FRAMEWORK_LOG_FILE}"
  fi
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logSkipped() {
  if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_INFO)); then
    Log::logMessage "${2:-SKIPPED}" "$1"
  fi
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logWarning() {
  if ((BASH_FRAMEWORK_LOG_LEVEL >= __LEVEL_WARNING)); then
    Log::logMessage "${2:-WARNING}" "$1"
  fi
}

# @description extract shDoc from file
#
# @arg $1 file:String
# @stdout the shell documentation in markdown format
ShellDoc::generateShellDoc() {
  local file="$1"

  ShellDoc::installRequirementsIfNeeded
  (
    "${FRAMEWORK_VENDOR_DIR}/shdoc/shdoc" <"${file}" || {
      Log::displayError "parse error of file ${file}"
      return 0
    }
  ) || true
}

# @description ensure command git is available
# @exitcode 1 if git command not available
# @stderr diagnostics information is displayed
Git::requireGitCommand() {
  Assert::commandExists git
}

# @description ensure env files are loaded
# @noargs
# @exitcode 1 if getOrderedConfFiles fails
# @exitcode 2 if one of env files fails to load
# @stderr diagnostics information is displayed
Env::requireLoad() {
  local configFilesStr
  configFilesStr="$(Env::getOrderedConfFiles)" || return 1

  local -a configFiles
  readarray -t configFiles <<<"${configFilesStr}"

  # if empty string, there will be one element
  if ((${#configFiles[@]} == 0)) || [[ -z "${configFilesStr}" ]]; then
    # should not happen, as there is always default file
    Log::displaySkipped "no env file to load"
    return 0
  fi

  Env::mergeConfFiles "${configFiles[@]}" || {
    Log::displayError "while loading config files: ${configFiles[*]}"
    return 2
  }
}

# @description activate or not Log::display* and Log::log* functions
# based on BASH_FRAMEWORK_DISPLAY_LEVEL and BASH_FRAMEWORK_LOG_LEVEL
# environment variables loaded by Env::requireLoad
# try to create log file and rotate it if necessary
# @noargs
# @set BASH_FRAMEWORK_LOG_LEVEL int to OFF level if BASH_FRAMEWORK_LOG_FILE is empty or not writable
# @env BASH_FRAMEWORK_DISPLAY_LEVEL int
# @env BASH_FRAMEWORK_LOG_LEVEL int
# @env BASH_FRAMEWORK_LOG_FILE String
# @env BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION int do log rotation if > 0
# @exitcode 0 always successful
# @stderr diagnostics information about log file is displayed
# @require Env::requireLoad
Log::requireLoad() {
  if [[ -z "${BASH_FRAMEWORK_LOG_FILE:-}" ]]; then
    BASH_FRAMEWORK_LOG_LEVEL=${__LEVEL_OFF}
    export BASH_FRAMEWORK_LOG_LEVEL
  fi

  if ((BASH_FRAMEWORK_LOG_LEVEL > __LEVEL_OFF)); then
    if [[ ! -f "${BASH_FRAMEWORK_LOG_FILE}" ]]; then
      if
        ! mkdir -p "$(dirname "${BASH_FRAMEWORK_LOG_FILE}")" 2>/dev/null ||
          ! touch --no-create "${BASH_FRAMEWORK_LOG_FILE}" 2>/dev/null
      then
        BASH_FRAMEWORK_LOG_LEVEL=${__LEVEL_OFF}
        echo -e "${__ERROR_COLOR}ERROR   - File ${BASH_FRAMEWORK_LOG_FILE} is not writable${__RESET_COLOR}" >&2
      fi
    elif [[ ! -w "${BASH_FRAMEWORK_LOG_FILE}" ]]; then
      BASH_FRAMEWORK_LOG_LEVEL=${__LEVEL_OFF}
      echo -e "${__ERROR_COLOR}ERROR   - File ${BASH_FRAMEWORK_LOG_FILE} is not writable${__RESET_COLOR}" >&2
    fi

  fi

  if ((BASH_FRAMEWORK_LOG_LEVEL > __LEVEL_OFF)); then
    # will always be created even if not in info level
    Log::logMessage "INFO" "Logging to file ${BASH_FRAMEWORK_LOG_FILE} - Log level ${BASH_FRAMEWORK_LOG_LEVEL}"
    if ((BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION > 0)); then
      Log::rotate "${BASH_FRAMEWORK_LOG_FILE}" "${BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION}"
    fi
  fi
}

# @description check if command specified exists or return 1
# with error and message if not
#
# @arg $1 commandName:String on which existence must be checked
# @arg $2 helpIfNotExists:String a help command to display if the command does not exist
#
# @exitcode 1 if the command specified does not exist
# @stderr diagnostic information + help if second argument is provided
Assert::commandExists() {
  local commandName="$1"
  local helpIfNotExists="$2"

  "${BASH_FRAMEWORK_COMMAND:-command}" -v "${commandName}" >/dev/null 2>/dev/null || {
    Log::displayError "${commandName} is not installed, please install it"
    if [[ -n "${helpIfNotExists}" ]]; then
      Log::displayInfo "${helpIfNotExists}"
    fi
    return 1
  }
  return 0
}

# @description get list of env files to load
# in order to make them available for Env::requireLoad
# @env BASH_FRAMEWORK_ARGV String[] list of arguments passed to the command (provided by _mandatoryHeaders.sh file)
# @exitcode 1 if one of the env file cannot be generated
# @exitcode 2 if one of the env file is not a file or readable
# @stdout the env files asked to be loaded
# @stderr diagnostic information on failure
# @see https://github.com/fchastanet/bash-tools-framework/blob/master/FrameworkDoc.md#config_file_order
Env::getOrderedConfFiles() {
  local -a configFiles=()
  local verboseFile
  verboseFile="$(Env::parseVerboseArg)" || return 1
  if [[ -n "${verboseFile}" ]]; then
    configFiles+=("${verboseFile}")
  fi

  local -a envFiles
  envFilesStr="$(Env::parseEnvFileArg)" || return 1
  if [[ -n "${envFilesStr}" ]]; then
    readarray -t envFiles <<<"${envFilesStr}"
    if ((${#envFiles[@]} > 0)); then
      configFiles+=("${envFiles[@]}")
    fi
  fi

  if [[ -n "${BASH_FRAMEWORK_ENV_FILES[0]+1}" ]]; then
    # BASH_FRAMEWORK_ENV_FILES is an array
    configFiles+=("${BASH_FRAMEWORK_ENV_FILES[@]}")
  fi

  local defaultEnvFile
  defaultEnvFile="$(Env::createDefaultEnvFile)" || return 1
  configFiles+=("${defaultEnvFile}")

  local file
  for file in "${configFiles[@]}"; do
    if [[ ! -f "${file}" || ! -r "${file}" ]]; then
      Log::displayError "One of the config file is not available '${file}'"
      return 2
    fi
    echo "${file}"
  done
}

# @description merge and load conf files specified as argument
# - files are cleaned from ay comment
# - missing quotes after property = sign are added automatically
# - automatic remove of all whitespace before and after declarations
# - bash arrays are not supported
# - if a variable is declared in first file and overridden later on
#   in the same file or in subsequent files, those overloads will be
#   ignored
# @warning if an error occurs while loading one of the config file, exit code 3 but environment could be partially loaded
# @arg $@ args:String[] list of configuration files to load in order
# @set envVars String will set in environment all the variables that have been declared in the config files
# @env envVars String the env variables of the current script could be used to interpret variables during config files parsing
# @exitcode 0 if no config files provided or load completed successfully
# @exitcode 1 if error occurred during parsing the config files (file not found, grep, awk or sed error)
# @exitcode 2 if temporary file cannot be created
# @exitcode 3 if an error occurred during config file sourcing
# @stderr diagnostics information is displayed
# @see largely inspired but modified from https://opensource.com/article/21/5/processing-configuration-files-shell
Env::mergeConfFiles() {
  local -a configFileList=("$@")

  if ((${#configFileList[@]} == 0)); then
    return 0
  fi

  local combinedConfigFile
  combinedConfigFile="$(Framework::createTempFile "mergeConfFiles")" || return 2

  (
    # removes any trailing whitespace from each file, if any
    # this is absolutely required when importing into ConfigMaps
    # put quotes around values
    sed -E -e $'s/\s*$// ; /^$/d ; /^#.*$/d ; s/=([^"\'].*)$/="\\1"/' "${configFileList[@]}" |
      # remove all comment lines
      Filters::commentLines |
      # iterates over each file and prints (default awk behavior)
      # each unique line; only takes first value and ignores duplicates
      awk -F= '!line[$1]++'
  ) >"${combinedConfigFile}" || return 1

  # have to export everything, and source it twice:
  # 1) first source is to realize variables
  # 2) second time is to realize references
  set -o allexport
  # shellcheck source=.framework-config
  source "${combinedConfigFile}" || return 3
  # shellcheck source=.framework-config
  source "${combinedConfigFile}" || return 3
  set +o allexport
}

# @description To be called before logging in the log file
# @arg $1 file:string log file name
# @arg $2 maxLogFilesCount:int maximum number of log files
Log::rotate() {
  local file="$1"
  local maxLogFilesCount="${2:-5}"

  if [[ ! -f "${file}" ]]; then
    Log::displaySkipped "Log file ${file} doesn't exist yet"
    return 0
  fi
  for i in $(seq $((maxLogFilesCount - 1)) -1 1); do
    Log::displayInfo "Log rotation ${file}.${i} to ${file}.$((i + 1))"
    mv "${file}."{"${i}","$((i + 1))"} &>/dev/null || true
  done
  if cp "${file}" "${file}.1" &>/dev/null; then
    echo >"${file}" # reset log file
    Log::displayInfo "Log rotation ${file} to ${file}.1"
  fi
}

# @description default env file with all default values
# @stdout the default env filepath
Env::createDefaultEnvFile() {
  local envFile
  envFile="$(Framework::createTempFile "createDefaultEnvFileEnvFile")" || return 2

  (
    echo "BASH_FRAMEWORK_LOG_LEVEL=${BASH_FRAMEWORK_LOG_LEVEL:-0}"
    echo "BASH_FRAMEWORK_DISPLAY_LEVEL=${BASH_FRAMEWORK_DISPLAY_LEVEL:-${__LEVEL_WARNING}}"
    # shellcheck disable=SC2016
    echo 'BASH_FRAMEWORK_LOG_FILE="${BASH_FRAMEWORK_LOG_FILE:-"${FRAMEWORK_ROOT_DIR}/logs/${SCRIPT_NAME}.log"}"'
    echo "BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION=${BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION:-5}"
  ) >"${envFile}"
  echo "${envFile}"
}

# @description if --env-file option is parsed in arguments
# outputs the file provided after this argument to make it
# available for Env::requireLoad
# @option --env-file <file> the environment file to load
# @env BASH_FRAMEWORK_ARGV String[] list of arguments passed to the command (provided by _mandatoryHeaders.sh file)
# @exitcode 1 if Env file provided is invalid
# @stdout the env filepath asked to be loaded
# @stderr diagnostic information on failure
Env::parseEnvFileArg() {
  (
    set -- "${BASH_FRAMEWORK_ARGV[@]}" --
    while true; do
      case $1 in
        --env-file)
          shift || true
          if [[ "$1" = "--" ]]; then
            Log::displayError "Env file not provided"
            return 1
          fi
          if [[ ! -r "$1" ]]; then
            Log::displayError "Env file provided '$1' is invalid"
            return 1
          fi
          echo "$1"
          ;;
        --)
          break
          ;;
        *)
          # ignore
          ;;
      esac
      shift || true
    done
  )
}

# @description verbose level off
export __VERBOSE_LEVEL_OFF=0
# @description verbose level info
export __VERBOSE_LEVEL_INFO=1
# @description verbose level info
export __VERBOSE_LEVEL_DEBUG=2
# @description verbose level info
export __VERBOSE_LEVEL_TRACE=3

# @description if --verbose|-v option is parsed in arguments
# generates a conf file that will be loaded via Env::requireLoad
# @option -v verbose level short option (verbose level = info,  display level = info)
# @option --verbose verbose level long option (verbose level = info,  display level = info)
# @option -vv more verbose logs option (verbose level = debug, display level = debug)
# @option -vvv trace level logs option (verbose level = trace, display level = debug)
# @env BASH_FRAMEWORK_ARGV String[] list of arguments passed to the command (provided by _mandatoryHeaders.sh file)
# @set BASH_FRAMEWORK_ARGS_VERBOSE int 1 if -v, 2 if -vv, 3 if -vvv
# @set BASH_FRAMEWORK_DISPLAY_LEVEL int 3 if --verbose|-v, 4 if -vv or -vvv
# @require Env::requireRemoveVerboseArg
Env::parseVerboseArg() {
  local envFile
  envFile="$(Framework::createTempFile "parseVerboseArgEnvFile")" || return 2

  (
    local verbose=${__VERBOSE_LEVEL_OFF}
    local displayLevel=0
    local arg
    for arg in "${BASH_FRAMEWORK_ARGV[@]}"; do
      case "${arg}" in
        --verbose | -v)
          verbose=${__VERBOSE_LEVEL_INFO}
          displayLevel=${__LEVEL_INFO}
          ;;
        -vv)
          verbose=${__VERBOSE_LEVEL_DEBUG}
          displayLevel=${__LEVEL_DEBUG}
          ;;
        -vvv)
          verbose=${__VERBOSE_LEVEL_TRACE}
          displayLevel=${__LEVEL_DEBUG}
          ;;
        *)
          # ignore
          ;;
      esac
    done
    # compute resulting option
    local verboseOption=""
    case ${verbose} in
      "${__VERBOSE_LEVEL_INFO}")
        verboseOption="--verbose"
        ;;
      "${__VERBOSE_LEVEL_DEBUG}")
        verboseOption="-vv"
        ;;
      "${__VERBOSE_LEVEL_TRACE}")
        verboseOption="-vvv"
        ;;
      *) ;;
    esac

    echo "BASH_FRAMEWORK_ARGS_VERBOSE_OPTION='${verboseOption}'"
    echo "BASH_FRAMEWORK_ARGS_VERBOSE=${verbose}"
    if [[ "${displayLevel}" != "0" ]]; then
      echo "BASH_FRAMEWORK_DISPLAY_LEVEL=${displayLevel}"
    fi
  ) >"${envFile}"
  echo "${envFile}"
}

# @description remove comment lines from input or files provided as arguments
# @arg $@ files:String[] (optional) the files to filter
# @env commentLinePrefix String the comment line prefix (default value: #)
# @exitcode 0 if lines filtered or not
# @exitcode 2 if grep fails for any other reasons than not found
# @stdin the file as stdin to filter (alternative to files argument)
# @stdout the filtered lines
# shellcheck disable=SC2120
Filters::commentLines() {
  grep -vxE "[[:blank:]]*(${commentLinePrefix:-#}.*)?" "$@" || test $? = 1
}

# @description remove verbose args from BASH_FRAMEWORK_ARGV
# @noargs
# @set BASH_FRAMEWORK_ARGV String[] remove args -v --verbose -vv -vvv
Env::requireRemoveVerboseArg() {
  # remove verbose args from BASH_FRAMEWORK_ARGV
  Array::remove BASH_FRAMEWORK_ARGV -v --verbose -vv -vvv
}

# @description remove elements from array
# @arg $1 arrayRemoveArray:&String[] (reference) array from which elements have to be removed
# @arg $@ valuesToRemoveKeys:String[] list of elements to remove
# @warning Performance1 : version taken from https://stackoverflow.com/a/59030460
# @warning Performance2 : for multiple values to remove, prefer using Array::removeIf
# @see Array::removeIf
Array::remove() {
  local -n arrayRemoveArray=$1
  shift || true # $@ contains elements to remove
  local -A valuesToRemoveKeys=()

  # Tag items to remove
  local del
  for del in "$@"; do valuesToRemoveKeys[${del}]=1; done

  # remove items
  local k
  for k in "${!arrayRemoveArray[@]}"; do
    if [[ -n "${valuesToRemoveKeys[${arrayRemoveArray[k]}]+xxx}" ]]; then
      unset 'arrayRemoveArray[k]'
    fi
  done

  # compaction (element re-indexing, because unset makes "holes" in array )
  arrayRemoveArray=("${arrayRemoveArray[@]}")
}

# FUNCTIONS

facade_main_99f4010ed2924ca7be559c41ae7aef48() {
FRAMEWORK_ROOT_DIR="$(cd "${CURRENT_DIR}/.." && pwd -P)"
FRAMEWORK_SRC_DIR="${FRAMEWORK_ROOT_DIR}/src"
FRAMEWORK_BIN_DIR="${FRAMEWORK_ROOT_DIR}/bin"
FRAMEWORK_VENDOR_DIR="${FRAMEWORK_ROOT_DIR}/vendor"
FRAMEWORK_VENDOR_BIN_DIR="${FRAMEWORK_ROOT_DIR}/vendor/bin"
# REQUIRES
Git::requireGitCommand
Env::requireLoad
Log::requireLoad
Env::requireRemoveVerboseArg
Compiler::Facade::requireCommandBinDir

# @require Compiler::Facade::requireCommandBinDir

PAGES_DIR="${FRAMEWORK_ROOT_DIR}/pages"

HELP="$(
  cat <<EOF
${__HELP_TITLE}Description:${__HELP_NORMAL} generate markdown documentation
${__HELP_TITLE}Usage:${__HELP_NORMAL} ${SCRIPT_NAME}

${__HELP_TITLE}Author:${__HELP_NORMAL}
[François Chastanet](https://github.com/fchastanet)

${__HELP_TITLE}Source file:${__HELP_NORMAL}
https://github.com/fchastanet/bash-tools-framework/tree/master/src/_binaries/doc.sh

${__HELP_TITLE}License:${__HELP_NORMAL}
MIT License

Copyright (c) 2022 François Chastanet
EOF
)"
Args::defaultHelp "${HELP}" "${BASH_FRAMEWORK_ARGV[@]}"

ShellDoc::installRequirementsIfNeeded

if [[ "${IN_BASH_DOCKER:-}" != "You're in docker" ]]; then
  "${COMMAND_BIN_DIR}/runBuildContainer" "/bash/bin/doc" "$@"
  exit $?
fi

export FRAMEWORK_ROOT_DIR

#-----------------------------
# doc generation
#-----------------------------

Log::displayInfo 'generate Commands.md'
((TOKEN_NOT_FOUND_COUNT = 0)) || true
ShellDoc::generateMdFileFromTemplate \
  "${FRAMEWORK_ROOT_DIR}/doc/templates/Commands.tmpl.md" \
  "${PAGES_DIR}/Commands.md" \
  "${COMMAND_BIN_DIR}" \
  TOKEN_NOT_FOUND_COUNT \
  '(bash-tpl|var|simpleBinary|shdoc|installFacadeExample)$'

# clean folder before generate
rm -f "${PAGES_DIR}/Index.md" || true
rm -Rf "${PAGES_DIR}/bashDoc" || true
rm -Rf "${PAGES_DIR}/FrameworkIndex.md" || true

ShellDoc::generateShellDocsFromDir \
  "${FRAMEWORK_SRC_DIR}" \
  "src" \
  "${PAGES_DIR}/bashDoc" \
  "${PAGES_DIR}/FrameworkIndex.md" \
  "https://github.com/fchastanet/bash-tools-framework" \
  '/testsData|/_.*' \
  '(/__all\.sh)$'
cp "${FRAMEWORK_ROOT_DIR}/doc/guides/Docker.md" "${PAGES_DIR}/bashDoc/DockerUsage.md"

declare -a optionsDocs=(
  "generateGroup"
  "generateOption"
  "generateArg"
  "generateCommand"
)
for file in "${optionsDocs[@]}"; do
  "${FRAMEWORK_VENDOR_DIR}/shdoc/shdoc" \
    <"${FRAMEWORK_SRC_DIR}/Options/${file}.sh" \
    >"${FRAMEWORK_ROOT_DIR}/doc/guides/Options/${file}.md"
  # make pre-commit happy
  sed -i -E -e '${/^$/d;}' "${FRAMEWORK_ROOT_DIR}/doc/guides/Options/${file}.md"
done

cp "${FRAMEWORK_ROOT_DIR}/README.md" "${PAGES_DIR}"
sed -i -E \
  -e '/<!-- remove -->/,/<!-- endRemove -->/d' \
  -e 's#https://fchastanet.github.io/bash-tools-framework/#/#' \
  -e 's#^> \*\*_TIP:_\*\* (.*)$#> [!TIP|label:\1]#' \
  "${PAGES_DIR}/README.md"

cp -R "${FRAMEWORK_ROOT_DIR}/doc" "${PAGES_DIR}"
rm -Rf "${PAGES_DIR}/doc/guides/templates"

Log::displayInfo 'generate FrameworkFullDoc.md'
cp "${FRAMEWORK_ROOT_DIR}/doc/templates/FrameworkFullDoc.tmpl.md" "${PAGES_DIR}/FrameworkFullDoc.md"
(
  echo
  find "${PAGES_DIR}/bashDoc" -type f -name '*.md' -print0 | LC_ALL=C sort -z | xargs -0 cat
) >>"${PAGES_DIR}/FrameworkFullDoc.md"

while read -r path; do
  ShellDoc::fixMarkdownToc "${path}"
done < <(find "${PAGES_DIR}" -type f -name '*.md')

if ((TOKEN_NOT_FOUND_COUNT > 0)); then
  exit 1
fi

}

facade_main_99f4010ed2924ca7be559c41ae7aef48 "$@"
