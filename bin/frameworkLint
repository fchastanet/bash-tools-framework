#!/usr/bin/env bash
###############################################################################
# GENERATED FACADE FROM https://github.com/fchastanet/bash-tools-framework/tree/master/src/_binaries/frameworkLint.sh
# DO NOT EDIT IT
###############################################################################
# shellcheck disable=SC2288,SC2034
# BIN_FILE=${FRAMEWORK_ROOT_DIR}/bin/frameworkLint
# VAR_RELATIVE_FRAMEWORK_DIR_TO_CURRENT_DIR=..
# VAR_DEPRECATED_LOAD=1
# FACADE

# ensure that no user aliases could interfere with
# commands used in this script
unalias -a || true

# shellcheck disable=SC2034
((failures = 0)) || true

shopt -s expand_aliases

# Bash will remember & return the highest exit code in a chain of pipes.
# This way you can catch the error inside pipes, e.g. mysqldump | gzip
set -o pipefail
set -o errexit

# Command Substitution can inherit errexit option since bash v4.4
shopt -s inherit_errexit || true

# a log is generated when a command fails
set -o errtrace

# use nullglob so that (file*.php) will return an empty array if no file matches the wildcard
shopt -s nullglob

# ensure regexp are interpreted without accentuated characters
export LC_ALL=POSIX

export TERM=xterm-256color

#avoid interactive install
export DEBIAN_FRONTEND=noninteractive
export DEBCONF_NONINTERACTIVE_SEEN=true
SCRIPT_NAME=${0##*/}
REAL_SCRIPT_FILE="$(readlink -e "$(realpath "${BASH_SOURCE[0]}")")"
CURRENT_DIR="$(cd "$(readlink -e "${REAL_SCRIPT_FILE%/*}")" && pwd -P)"
COMMAND_BIN_DIR="${CURRENT_DIR}"

FRAMEWORK_ROOT_DIR="$(cd "${CURRENT_DIR}/.." && pwd -P)"
FRAMEWORK_SRC_DIR="${FRAMEWORK_ROOT_DIR}/src"
FRAMEWORK_BIN_DIR="${FRAMEWORK_ROOT_DIR}/bin"
FRAMEWORK_VENDOR_DIR="${FRAMEWORK_ROOT_DIR}/vendor"
FRAMEWORK_VENDOR_BIN_DIR="${FRAMEWORK_ROOT_DIR}/vendor/bin"

if [[ -t 1 || -t 2 ]]; then
  # check colors applicable https://misc.flogisoft.com/bash/tip_colors_and_formatting
  export __ERROR_COLOR='\e[31m'      # Red
  export __INFO_COLOR='\e[44m'       # white on lightBlue
  export __SUCCESS_COLOR='\e[32m'    # Green
  export __WARNING_COLOR='\e[33m'    # Yellow
  export __TEST_COLOR='\e[100m'      # Light magenta
  export __TEST_ERROR_COLOR='\e[41m' # white on red
  export __SKIPPED_COLOR='\e[33m'    # Yellow
  export __HELP_COLOR='\e[7;49;33m'  # Black on Gold
  export __DEBUG_COLOR='\e[37m'      # Grey
  # Internal: reset color
  export __RESET_COLOR='\e[0m' # Reset Color
  # shellcheck disable=SC2155,SC2034
  export __HELP_EXAMPLE="$(echo -e "\e[1;30m")"
  # shellcheck disable=SC2155,SC2034
  export __HELP_TITLE="$(echo -e "\e[1;37m")"
  # shellcheck disable=SC2155,SC2034
  export __HELP_NORMAL="$(echo -e "\033[0m")"
else
  # check colors applicable https://misc.flogisoft.com/bash/tip_colors_and_formatting
  export __ERROR_COLOR=''
  export __INFO_COLOR=''
  export __SUCCESS_COLOR=''
  export __WARNING_COLOR=''
  export __SKIPPED_COLOR=''
  export __HELP_COLOR=''
  export __TEST_COLOR=''
  export __TEST_ERROR_COLOR=''
  export __DEBUG_COLOR=''
  # Internal: reset color
  export __RESET_COLOR=''
  export __HELP_EXAMPLE=''
  export __HELP_TITLE=''
  export __HELP_NORMAL=''
fi

################################################
# Temp dir management
################################################

KEEP_TEMP_FILES="${KEEP_TEMP_FILES:-0}"
export KEEP_TEMP_FILES

# PERSISTENT_TMPDIR is not deleted by traps
PERSISTENT_TMPDIR="${TMPDIR:-/tmp}/bash-framework"
export PERSISTENT_TMPDIR
mkdir -p "${PERSISTENT_TMPDIR}"

# shellcheck disable=SC2034
TMPDIR="$(mktemp -d -p "${PERSISTENT_TMPDIR:-/tmp}" -t bash-framework-$$-XXXXXX)"
export TMPDIR

# temp dir cleaning
cleanOnExit() {
  if [[ "${KEEP_TEMP_FILES:-0}" = "1" ]]; then
    Log::displayInfo "KEEP_TEMP_FILES=1 temp files kept here '${TMPDIR}'"
  elif [[ -n "${TMPDIR+xxx}" ]]; then
    Log::displayDebug "KEEP_TEMP_FILES=0 removing temp files '${TMPDIR}'"
    rm -Rf "${TMPDIR:-/tmp/fake}" >/dev/null 2>&1
  fi
}
trap cleanOnExit EXIT HUP QUIT ABRT TERM

# @see https://unix.stackexchange.com/a/386856
interruptManagement() {
  # restore SIGINT handler
  trap - INT
  # ensure that Ctrl-C is trapped by this script and not by sub process
  # report to the parent that we have indeed been interrupted
  kill -s INT "$$"
}
trap interruptManagement INT

# @description change display level to verboseDisplayLevel argument if --verbose|-v option is parsed in arguments
# @arg $1 verboseDisplayLevel:String the level of verbosity to set
# @arg $@ args:String[] list of options
# @option -v short verbose option
# @option --verbose long verbose option
# @set ARGS_VERBOSE 1 if --verbose|-v option is parsed in arguments
# @set BASH_FRAMEWORK_DISPLAY_LEVEL to verboseDisplayLevel if --verbose|-v option is parsed in arguments
# @exitcode 1 if --verbose|-v option is not present in args list
Args::parseVerbose() {
  local verboseDisplayLevel="$1"
  declare -gx ARGS_VERBOSE=0
  shift || true
  local status=1
  while true; do
    if [[ "$1" = "--verbose" || "$1" = "-v" ]]; then
      status=0
      ARGS_VERBOSE=1
      break
    fi
    shift || break
  done
  if [[ "${status}" = "0" ]]; then
    export BASH_FRAMEWORK_DISPLAY_LEVEL=${verboseDisplayLevel}
  fi
  return "${status}"
}

# @description check if an element is contained in an array
#
# @arg $1 needle:String
# @arg $@ array:String[]
# @exitcode 0 if found
# @exitcode 1 otherwise
# @example
#   Array::contains "${libPath}" "${__BASH_FRAMEWORK_IMPORTED_FILES[@]}"
Array::contains() {
  local element
  for element in "${@:2}"; do
    [[ "${element}" = "$1" ]] && return 0
  done
  return 1
}

# @description remove elements from array
# @arg $1 arrayRemoveArray:&String[] (reference) array from which elements have to be removed
# @arg $@ valuesToRemoveKeys:String[] list of elements to remove
# @warning Performance1 : version taken from https://stackoverflow.com/a/59030460
# @warning Performance2 : for multiple values to remove, prefer using Array::removeIf
# @see Array::removeIf
Array::remove() {
  local -n arrayRemoveArray=$1
  shift || true # $@ contains elements to remove
  local -A valuesToRemoveKeys=()

  # Tag items to remove
  local del
  for del in "$@"; do valuesToRemoveKeys[${del}]=1; done

  # remove items
  local k
  for k in "${!arrayRemoveArray[@]}"; do
    if [[ -n "${valuesToRemoveKeys[${arrayRemoveArray[k]}]+xxx}" ]]; then
      unset 'arrayRemoveArray[k]'
    fi
  done

  # compaction (element re-indexing, because unset makes "holes" in array )
  arrayRemoveArray=("${arrayRemoveArray[@]}")
}

# @description ensure that file begin with a bash shebang
# @arg $1 file:String
# @exitcode 1 if file doesn't have a bash shebang
# @exitcode 2 if file doesn't exist
Assert::bashFile() {
  local file="$1"
  local head=""
  if [[ ! -f "${file}" ]]; then
    return 2
  fi
  head="$(head -n 1 "${file}")"
  [[ "${head}" =~ ^#\!.*bash ]]
}

# @description assert that first arg respects this bash framework naming convention
# @arg $1 bashFrameworkFunction:String the function's name to assert
# @exitcode 1 if bashFrameworkFunction arg doesn't respect this bash framework naming convention
Assert::bashFrameworkFunction() {
  local bashFrameworkFunction="$1"
  local expectedRegexp="^([A-Za-z0-9_]+[A-Za-z0-9_-]*::)+([a-zA-Z0-9_-]+)\$"

  [[ "${bashFrameworkFunction}" =~ ${expectedRegexp} ]]
}

# @description convert function name to path replacing :: by /
# @internal
convertFunctionNameToPath() {
  local functionName="$1"
  echo "$(sed -E 's#::#/#g' <<<"${functionName}").sh"
}

# @description return the path of the function found in srcDirs
# @arg $1 functionName:String function name (eg: Functions::myFunction)
# @arg $@ srcDirs:String[] rest of args list of src directories in # which the function will be searched
# @exitcode 1 if function not found
# @exitcode 0 if found
# @stdout the filepath of the function if found
Compiler::findFunctionInSrcDirs() {
  local functionName="$1"
  shift || true
  local -a srcDirs=("$@")
  local fileNameToImport

  fileNameToImport="$(convertFunctionNameToPath "${functionName}")"

  # search through srcDirs the file to import
  for srcDir in "${srcDirs[@]}"; do
    fileToImport="${srcDir}/${fileNameToImport}"
    if [[ -f "${fileToImport}" ]]; then
      # we found it
      echo "${fileToImport}"
      return 0
    fi
  done

  return 1
}

# lazy initialization
declare -g BASH_FRAMEWORK_CACHED_ENV_FILE
declare -g BASH_FRAMEWORK_DEFAULT_ENV_FILE

# @description load variables in order(from less specific to more specific) from :
# - ${FRAMEWORK_ROOT_DIR}/src/Env/testsData/.env file
# - ${FRAMEWORK_ROOT_DIR}/conf/.env file if exists
# - ~/.env file if exists
# - ~/.bash-tools/.env file if exists
# - BASH_FRAMEWORK_ENV_FILEPATH=<fullPathToEnvFile or empty if no file to be loaded>
#
# @env BASH_FRAMEWORK_INITIALIZED if 1 skip the load
# @env FRAMEWORK_ROOT_DIR
# @env HOME
# @env BASH_FRAMEWORK_ENV_FILEPATH
# @env OVERRIDE_* string allows to override any env file variable (with * name)
#
# @set BASH_FRAMEWORK_CACHED_ENV_FILE string
# @set BASH_FRAMEWORK_DEFAULT_ENV_FILE string
# @set BASH_FRAMEWORK_INITIALIZED int 1 if load successful
Env::load() {
  if [[ "${BASH_FRAMEWORK_INITIALIZED:-0}" = "1" ]]; then
    return 0
  fi
  BASH_FRAMEWORK_CACHED_ENV_FILE="$(mktemp -p "${TMPDIR:-/tmp}" -t "env_vars.XXXXXXX")"
  BASH_FRAMEWORK_DEFAULT_ENV_FILE="$(mktemp -p "${TMPDIR:-/tmp}" -t "default_env_file.XXXXXXX")"
  # shellcheck source=src/Env/testsData/.env
  (
    echo "BASH_FRAMEWORK_LOG_LEVEL=${BASH_FRAMEWORK_LOG_LEVEL:-0}"
    echo "BASH_FRAMEWORK_DISPLAY_LEVEL=${BASH_FRAMEWORK_DISPLAY_LEVEL:-3}"
    echo "BASH_FRAMEWORK_LOG_FILE=${BASH_FRAMEWORK_LOG_FILE:-${FRAMEWORK_ROOT_DIR}/logs/${SCRIPT_NAME}.log}"
    echo "BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION=${BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION:-5}"
  ) >"${BASH_FRAMEWORK_DEFAULT_ENV_FILE}"

  (
    # reset temp file
    echo >"${BASH_FRAMEWORK_CACHED_ENV_FILE}"

    # list .env files that need to be loaded
    local -a files=()
    if [[ -f "${BASH_FRAMEWORK_DEFAULT_ENV_FILE}" ]]; then
      files+=("${BASH_FRAMEWORK_DEFAULT_ENV_FILE}")
    fi
    if [[ -f "${FRAMEWORK_ROOT_DIR}/conf/.env" && -r "${FRAMEWORK_ROOT_DIR}/conf/.env" ]]; then
      files+=("${FRAMEWORK_ROOT_DIR}/conf/.env")
    fi
    if [[ -f "${HOME}/.env" && -r "${HOME}/.env" ]]; then
      files+=("${HOME}/.env")
    fi
    local file
    for file in "$@"; do
      if [[ -f "${file}" && -r "${file}" ]]; then
        files+=("${file}")
      fi
    done
    # import custom .env file
    if [[ -n "${BASH_FRAMEWORK_ENV_FILEPATH+xxx}" ]]; then
      # load BASH_FRAMEWORK_ENV_FILEPATH
      if [[ -f "${BASH_FRAMEWORK_ENV_FILEPATH}" && -r "${BASH_FRAMEWORK_ENV_FILEPATH}" ]]; then
        files+=("${BASH_FRAMEWORK_ENV_FILEPATH}")
      else
        Log::displayWarning "env file not not found - ${BASH_FRAMEWORK_ENV_FILEPATH}"
      fi
    fi

    # add all files added as parameters
    files+=("$@")

    # source each file in order
    local file
    for file in "${files[@]}"; do
      # shellcheck source=src/Env/testsData/.env
      source "${file}" || {
        Log::displayWarning "Cannot load '${file}'"
      }
    done

    # copy only the variables to the tmp file
    local varName overrideVarName
    while IFS=$'\n' read -r varName; do
      overrideVarName="OVERRIDE_${varName}"
      if [[ -z ${!overrideVarName+xxx} ]]; then
        echo "${varName}='${!varName}'" >>"${BASH_FRAMEWORK_CACHED_ENV_FILE}"
      else
        # variable is overridden
        echo "${varName}='${!overrideVarName}'" >>"${BASH_FRAMEWORK_CACHED_ENV_FILE}"
      fi

      # using awk deduce all variables that need to be copied in tmp file
      #   from less specific file to the most
    done < <(awk -F= '!a[$1]++' "${files[@]}" | grep -v '^$\|^\s*\#' | cut -d= -f1)
  ) || exit 1

  # ensure all sourced variables will be exported
  set -o allexport

  # Finally load the temp file to make the variables available in current script
  # shellcheck source=src/Env/testsData/.env
  source "${BASH_FRAMEWORK_CACHED_ENV_FILE}"

  set +o allexport
  BASH_FRAMEWORK_INITIALIZED=1
}

# @description prepend directories to the PATH environment variable
# @arg $@ args:String[] list of directories to prepend
# @set PATH update PATH with the directories prepended
Env::pathPrepend() {
  local arg
  for arg in "$@"; do
    if [[ -d "${arg}" && ":${PATH}:" != *":${arg}:"* ]]; then
      PATH="$(realpath "${arg}"):${PATH}"
    fi
  done
}

# missingBashFileList this file will contain the files that are not available when checking them
# File::detectBashFile is used in conjunction with git ls-files
# typical case for missing file is when a file is marked as deleted but not staged
declare missingBashFileList
missingBashFileList=""
export missingBashFileList

# @description check if file provided is a bash file
# @arg $1 file:String
# @arg $@ args:String[]
# @set missingBashFileList String temp filepath that contains eventual missing files
# @stdout filepath if Assert::bashFile succeed
# @see Assert::bashFile
File::detectBashFile() {
  local file="$1"

  if [[ ! -f "${file}" ]]; then
    if [[ -z "${missingBashFileList}" ]]; then
      missingBashFileList="$(mktemp -p "${TMPDIR:-/tmp}" -t bash-tools-buildBinFiles-before-XXXXXX)"
    fi
    echo "${file}" >>"${missingBashFileList}"
    return 0
  fi
  if Assert::bashFile "${file}"; then
    echo "${file}"
  fi
}

# @description print the resolved path relative to DIR
# do not check for path existence
# @arg $1 srcFile:String the file to resolve
# @arg $2 relativeTo:String the directory
# @stdout the resolved path relative to DIR
File::relativeToDir() {
  local srcFile="$1"
  local relativeTo="$2"

  realpath -m --relative-to="${relativeTo}" "${srcFile}"
}

# @description allows to match a bash framework function based on the naming convention
# @warning this filter could extract bash framework functions that are actually commented in the source file
# @warning use FRAMEWORK_FUNCTIONS_IGNORE_REGEXP from .framework-config to filter unwanted functions
# @arg $@ files:String[] the files in which bash framework functions will be extracted
# @env PREFIX String an eventual prefix you would like to match
# @env FRAMEWORK_FUNCTIONS_IGNORE_REGEXP String this filter does not use this variable
# @exitcode 0 if match or no match
# @exitcode 2 if grep fails for other reasons
# @stdin you can alternatively provide content to filter via stdin
# @stdout the list of bash framework function detected
# @see [bash framework functions naming convention](/CompileCommand.md#bash_framework_functions_naming_convention)
# shellcheck disable=SC2120
Filters::bashFrameworkFunctions() {
  grep -Eo "${PREFIX:-}([A-Z]+[A-Za-z0-9_-]*::)+([a-zA-Z0-9_-]+)" "$@" || test $? = 1
}

# @description remove comment lines from input or files provided as arguments
# @arg $@ files:String[] (optional) the files to filter
# @env commentLinePrefix String the comment line prefix (default value: #)
# @exitcode 0 if lines filtered or not
# @exitcode 2 if grep fails for any other reasons than not found
# @stdin the file as stdin to filter (alternative to files argument)
# @stdout the filtered lines
# shellcheck disable=SC2120
Filters::commentLines() {
  grep -vxE "[[:blank:]]*(${commentLinePrefix:-#}.*)?" "$@" || test $? = 1
}

# @description load .framework-config
# @arg $1 loadedConfigFile:&String (passed by reference) the finally loaded configuration file path
# @arg $@ srcDirs:String[] the src directories in which .framework-config file will be searched
# @stdout the config file path loaded if any
# @exitcode 0 if .framework-config file has been found in srcDirs provided
# @exitcode 1 if .framework-config file not found
# @see Conf::loadNearestFile
Framework::loadConfig() {
  # shellcheck disable=SC2034
  local -n loadConfig_loadedConfigFile=$1
  shift || true
  Conf::loadNearestFile ".framework-config" loadConfig_loadedConfigFile "$@"
}

# @description Log namespace provides 2 kind of functions
# - Log::display* allows to display given message with
#   given display level
# - Log::log* allows to log given message with
#   given log level
# Log::display* functions automatically log the message too
# @see Log::load to load the display and log level from .env file

# @description log level off
export __LEVEL_OFF=0
# @description log level error
export __LEVEL_ERROR=1
# @description log level warning
export __LEVEL_WARNING=2
# @description log level info
export __LEVEL_INFO=3
# @description log level success
export __LEVEL_SUCCESS=3
# @description log level debug
export __LEVEL_DEBUG=4

export __LEVEL_OFF
export __LEVEL_ERROR
export __LEVEL_WARNING
export __LEVEL_INFO
export __LEVEL_SUCCESS
export __LEVEL_DEBUG

# @description Display message using debug color (grey)
# @arg $1 message:String the message to display
Log::displayDebug() {
  echo -e "${__DEBUG_COLOR}DEBUG   - ${1}${__RESET_COLOR}" >&2
  Log::logDebug "$1"
}

# @description Display message using error color (red)
# @arg $1 message:String the message to display
Log::displayError() {
  echo -e "${__ERROR_COLOR}ERROR   - ${1}${__RESET_COLOR}" >&2
  Log::logError "$1"
}

# @description Display message using info color (bg light blue/fg white)
# @arg $1 message:String the message to display
Log::displayInfo() {
  local type="${2:-INFO}"
  echo -e "${__INFO_COLOR}${type}    - ${1}${__RESET_COLOR}" >&2
  Log::logInfo "$1" "${type}"
}

# @description Display message using skip color (yellow)
# @arg $1 message:String the message to display
Log::displaySkipped() {
  echo -e "${__SKIPPED_COLOR}SKIPPED - ${1}${__RESET_COLOR}" >&2
  Log::logSkipped "$1"
}

# @description Display message using success color (bg green/fg white)
# @arg $1 message:String the message to display
Log::displaySuccess() {
  echo -e "${__SUCCESS_COLOR}SUCCESS - ${1}${__RESET_COLOR}" >&2
  Log::logSuccess "$1"
}

# @description Display message using warning color (yellow)
# @arg $1 message:String the message to display
Log::displayWarning() {
  echo -e "${__WARNING_COLOR}WARN    - ${1}${__RESET_COLOR}" >&2
  Log::logWarning "$1"
}

# @description Display message using error color (red) and exit immediately with error status 1
# @arg $1 message:String the message to display
Log::fatal() {
  echo -e "${__ERROR_COLOR}FATAL   - ${1}${__RESET_COLOR}" >&2
  Log::logFatal "$1"
  exit 1
}

# shellcheck disable=SC2317

# @description activate or not Log::display* and Log::log* functions
# based on BASH_FRAMEWORK_DISPLAY_LEVEL and BASH_FRAMEWORK_LOG_LEVEL
# environment variables
# try to create log file and rotate it if necessary
# @noargs
# @set BASH_FRAMEWORK_LOG_LEVEL int to OFF level if BASH_FRAMEWORK_LOG_FILE is empty or not writable
# @env BASH_FRAMEWORK_DISPLAY_LEVEL int
# @env BASH_FRAMEWORK_LOG_LEVEL int
# @env BASH_FRAMEWORK_LOG_FILE String
# @env BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION int do log rotation if > 0
# @exitcode 0 always successful
# @stderr diagnostics information about log file is displayed
Log::load() {
  # disable display methods following display level
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL < __LEVEL_DEBUG)); then
    Log::displayDebug() { :; }
  fi
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL < __LEVEL_INFO)); then
    Log::displayHelp() { :; }
    Log::displayInfo() { :; }
    Log::displaySkipped() { :; }
    Log::displaySuccess() { :; }
  fi
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL < __LEVEL_WARNING)); then
    Log::displayWarning() { :; }
    Log::displayStatus() { :; }
  fi
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL < __LEVEL_ERROR)); then
    Log::displayError() { :; }
  fi
  # disable log methods following log level
  if ((BASH_FRAMEWORK_LOG_LEVEL < __LEVEL_DEBUG)); then
    Log::logDebug() { :; }
  fi
  if ((BASH_FRAMEWORK_LOG_LEVEL < __LEVEL_INFO)); then
    Log::logHelp() { :; }
    Log::logInfo() { :; }
    Log::logSkipped() { :; }
    Log::logSuccess() { :; }
  fi
  if ((BASH_FRAMEWORK_LOG_LEVEL < __LEVEL_WARNING)); then
    Log::logWarning() { :; }
    Log::logStatus() { :; }
  fi
  if ((BASH_FRAMEWORK_LOG_LEVEL < __LEVEL_ERROR)); then
    Log::logError() { :; }
  fi

  if ((BASH_FRAMEWORK_LOG_LEVEL > __LEVEL_OFF)); then
    if [[ -z "${BASH_FRAMEWORK_LOG_FILE}" ]]; then
      BASH_FRAMEWORK_LOG_LEVEL=${__LEVEL_OFF}
      export BASH_FRAMEWORK_LOG_LEVEL
    elif [[ ! -f "${BASH_FRAMEWORK_LOG_FILE}" ]]; then
      if ! mkdir -p "$(dirname "${BASH_FRAMEWORK_LOG_FILE}")" 2>/dev/null; then
        BASH_FRAMEWORK_LOG_LEVEL=__LEVEL_OFF
        Log::displayWarning "Log dir cannot be created $(dirname "${BASH_FRAMEWORK_LOG_FILE}")"
      fi
      if ! touch --no-create "${BASH_FRAMEWORK_LOG_FILE}" 2>/dev/null; then
        BASH_FRAMEWORK_LOG_LEVEL=__LEVEL_OFF
        Log::displayWarning "Log file '${BASH_FRAMEWORK_LOG_FILE}' cannot be created"
      fi
    fi
    Log::displayInfo "Logging to file ${BASH_FRAMEWORK_LOG_FILE}"
    if ((BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION > 0)); then
      Log::rotate "${BASH_FRAMEWORK_LOG_FILE}" "${BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION}"
    fi
  fi
}

# @description Load the nearest config file
# in next example will search first .framework-config file in "srcDir1"
# then if not found will go in up directories until /
# then will search in "srcDir2"
# then if not found will go in up directories until /
# source the file if found
# @example
#   Conf::loadNearestFile ".framework-config" "srcDir1" "srcDir2"
#
# @arg $1 configFileName:String config file name to search
# @arg $2 loadedFile:String (passed by reference) will return the loaded config file name
# @arg $@ srcDirs:String[] source directories in which the config file will be searched
# @exitcode 0 if file found
# @exitcode 1 if file not found
Conf::loadNearestFile() {
  local configFileName="$1"
  local -n loadedFile="$2"
  shift 2 || true
  local -a srcDirs=("$@")
  for srcDir in "${srcDirs[@]}"; do
    configFile="$(File::upFind "${srcDir}" "${configFileName}" || true)"
    if [[ -n "${configFile}" ]]; then
      # shellcheck source=/.framework-config
      source "${configFile}" || Log::fatal "error while loading config file '${configFile}'"
      Log::displayDebug "Config file ${configFile} is loaded"
      # shellcheck disable=SC2034
      loadedFile="${configFile}"
      return 0
    fi
  done

  Log::displayWarning "Config file '${configFileName}' not found in any source directories provided"
  return 1
}

# @description Display message using info color (bg light blue/fg white)
# @arg $1 message:String the message to display
Log::displayHelp() {
  local type="${2:-HELP}"
  echo -e "${__HELP_COLOR}${type}    - ${1}${__RESET_COLOR}" >&2
  Log::logHelp "$1" "${type}"
}

# @description Display message using info color (blue) but warning level
# @arg $1 message:String the message to display
Log::displayStatus() {
  local type="${2:-STATUS}"
  echo -e "${__INFO_COLOR}${type}  - ${1}${__RESET_COLOR}" >&2
  Log::logStatus "$1" "${type}"
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logDebug() {
  Log::logMessage "${2:-DEBUG}" "$1"
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logError() {
  Log::logMessage "${2:-ERROR}" "$1"
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logFatal() {
  Log::logMessage "${2:-FATAL}" "$1"
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logHelp() {
  Log::logMessage "${2:-HELP}" "$1"
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logInfo() {
  Log::logMessage "${2:-INFO}" "$1"
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logSkipped() {
  Log::logMessage "${2:-SKIPPED}" "$1"
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logStatus() {
  Log::logMessage "${2:-STATUS}" "$1"
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logSuccess() {
  Log::logMessage "${2:-SUCCESS}" "$1"
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logWarning() {
  Log::logMessage "${2:-WARNING}" "$1"
}

# @description To be called before logging in the log file
# @arg $1 file:string log file name
# @arg $2 maxLogFilesCount:int maximum number of log files
Log::rotate() {
  local file="$1"
  local maxLogFilesCount="${2:-5}"

  if [[ ! -f "${file}" ]]; then
    Log::displaySkipped "Log file ${file} doesn't exist yet"
    return 0
  fi
  for i in $(seq $((maxLogFilesCount - 1)) -1 1); do
    Log::displayInfo "Log rotation ${file}.${i} to ${file}.$((i + 1))"
    mv "${file}."{"${i}","$((i + 1))"} &>/dev/null || true
  done
  if cp "${file}" "${file}.1" &>/dev/null; then
    echo >"${file}" # reset log file
    Log::displayInfo "Log rotation ${file} to ${file}.1"
  fi
}

# @description search a file in parent directories
#
# @arg $1 fromPath:String path
# @arg $2 fileName:String
# @arg $3 untilInclusivePath:String (optional) find for given file until reaching this folder (default value: /)
# @arg $@ untilInclusivePaths:String[] list of untilInclusivePath
# @stdout The filename if found
# @exitcode 1 if the command failed or file not found
File::upFind() {
  local fromPath="$1"
  shift || true
  local fileName="$1"
  shift || true
  local untilInclusivePath="${1:-/}"
  shift || true

  if [[ -f "${fromPath}" ]]; then
    fromPath="$(dirname "${fromPath}")"
  fi
  while true; do
    if [[ -f "${fromPath}/${fileName}" ]]; then
      echo "${fromPath}/${fileName}"
      return 0
    fi
    if Array::contains "${fromPath}" "${untilInclusivePath}" "$@" "/"; then
      return 1
    fi
    fromPath="$(readlink -f "${fromPath}"/..)"
  done
  return 1
}

# @description Internal: common log message
# @example text
#   [date]|[levelMsg]|message
#
# @example text
#   2020-01-19 19:20:21|ERROR  |log error
#   2020-01-19 19:20:21|SKIPPED|log skipped
#
# @arg $1 levelMsg:String message's level description (eg: STATUS, ERROR, ...)
# @arg $2 msg:String the message to display
# @env BASH_FRAMEWORK_LOG_FILE String log file to use, do nothing if empty
# @env BASH_FRAMEWORK_LOG_LEVEL int log level log only if > OFF or fatal messages
# @stderr diagnostics information is displayed
Log::logMessage() {
  local levelMsg="$1"
  local msg="$2"
  local date

  if [[ -z "${BASH_FRAMEWORK_LOG_FILE}" ]]; then
    return 0
  fi
  if ((BASH_FRAMEWORK_LOG_LEVEL > __LEVEL_OFF)) || [[ "${levelMsg}" = "FATAL" ]]; then
    mkdir -p "$(dirname "${BASH_FRAMEWORK_LOG_FILE}")" || true
    if Assert::fileWritable "${BASH_FRAMEWORK_LOG_FILE}"; then
      date="$(date '+%Y-%m-%d %H:%M:%S')"
      touch "${BASH_FRAMEWORK_LOG_FILE}"
      printf "%s|%7s|%s\n" "${date}" "${levelMsg}" "${msg}" >>"${BASH_FRAMEWORK_LOG_FILE}"
    else
      echo -e "${__ERROR_COLOR}ERROR   - File ${BASH_FRAMEWORK_LOG_FILE} is not writable${__RESET_COLOR}" >&2
    fi
  fi
}

# Checks if file can be created in folder
#

# @description Checks if file can be created in folder
# The file does not need to exist
# @arg $1 file:String
# @exitcode 1 if file is not a valid path
# @exitcode 2 if file parent's dir is not writable
# @exitcode 3 if existing file is not writable
# @see Assert::validPath
Assert::fileWritable() {
  local file="$1"
  local dir

  Assert::validPath "${file}" || return 1
  if [[ -f "${file}" ]]; then
    [[ -w "${file}" ]] || return 3
  else
    dir="$(dirname "${file}")"
    [[ -w "${dir}" ]] || return 2
  fi

}

# @description check if argument is a valid linux path
# invalid path are those with:
# - invalid characters
# - component beginning by a - (because could be considered as a command's option)
# - not beginning with a slash
# - relative
#
# @arg $1 path:string path that needs to be checked
# @exitcode 1 if path is invalid
# @see https://regex101.com/r/afLrmM/2
# @see Assert::validPosixPath if you need more restrictive check
Assert::validPath() {
  local path="$1"

  [[ "${path}" =~ ^\/$|^(\/[.a-zA-Z_0-9][.a-zA-Z_0-9-]*)+$ ]] &&
    [[ ! "${path}" =~ (\/\.\.)|(\.\.\/)|^\.$|^\.\.$ ]] # avoid relative
}

# FUNCTIONS

facade_main_a79586bd7b8a40fcabb0a2fd33ad002e() {
Env::load
export BASH_FRAMEWORK_DISPLAY_LEVEL="${__LEVEL_WARNING}"
Args::parseVerbose "${__LEVEL_INFO}" "$@" || true
declare -a args=("$@")
Array::remove args -v --verbose
set -- "${args[@]}"
Log::load
Env::pathPrepend "${COMMAND_BIN_DIR}"
# prepare bin directory for eventual bin files generated by Compiler::Embed::embed
mkdir -p "${TMPDIR:-/tmp}/bin"
Env::pathPrepend "${TMPDIR:-/tmp}/bin"
# REQUIRES

CONFIG_FILENAME="${FRAMEWORK_ROOT_DIR}/.framework-config"
FORMAT="plain"
DEFAULT_ARGS=(-f plain)
HELP="$(
  cat <<EOF
${__HELP_TITLE}Synopsis:${__HELP_NORMAL} This framework linter

${__HELP_TITLE}Usage:${__HELP_NORMAL} ${SCRIPT_NAME} [-h|--help] displays this help and exits
${__HELP_TITLE}Usage:${__HELP_NORMAL} ${SCRIPT_NAME} [-f|--format <checkstyle,plain>] [--verbose|-v]

${__HELP_TITLE}Description:${__HELP_NORMAL}
Lint files of the current repository
- check if all Namespace::functions are existing in the framework
- check that function defined in a .sh is correctly named
- check each function has a bats file associated
- shdoc
  - check that shdoc valid annotations are used
  - check that @require function matches naming convention and exists
  - check that at least @description is provided

${__HELP_TITLE}Options:${__HELP_NORMAL}
  -f|--format <checkstyle,plain>  define output format of this command
  -v|--verbose display more information about processed files
  --src-dir|-s <srcDir> provide the directory where to find the functions source code.
    Prefer using .framework-config file

${__HELP_TITLE}Author:${__HELP_NORMAL}
[François Chastanet](https://github.com/fchastanet)

${__HELP_TITLE}Source file:${__HELP_NORMAL}
https://github.com/fchastanet/bash-tools-framework/tree/master/src/_binaries/frameworkLint.sh

${__HELP_TITLE}License:${__HELP_NORMAL}
MIT License

Copyright (c) 2022 François Chastanet
EOF
)"

FRAMEWORK_FUNCTIONS_IGNORE_REGEXP=^$
NON_FRAMEWORK_FILES_REGEXP=^$
FRAMEWORK_FILES_FUNCTION_MATCHING_IGNORE_REGEXP=^$
FRAMEWORK_SRC_DIRS=()

if (($# == 0)); then
  set -- "${DEFAULT_ARGS[@]}"
fi

declare args
args="$(getopt -l help,format:,src-dir: -o hs:f: -- "$@" 2>/dev/null)" || true
eval set -- "${args}"

while true; do
  case $1 in
    -h | --help)
      echo -e "${HELP}"
      exit 0
      ;;
    -f | --format)
      shift || true
      if ! Array::contains "$1" "checkstyle" "plain"; then
        Log::fatal "format option invalid"
      fi
      FORMAT="$1"
      ;;
    --src-dir | -s)
      shift || true
      if [[ ! -d "$1" ]]; then
        Log::fatal "Directory '$1' does not exists"
      fi
      FRAMEWORK_SRC_DIRS+=("$(realpath --physical "$1")")
      ;;
    --)
      shift || true
      break
      ;;
    *)
      # ignore
      ;;
  esac
  shift || true
done

BASH_FRAMEWORK_INITIALIZED=0 Env::load

# load .framework-config
# shellcheck disable=SC2034
configFile=""
# shellcheck source=/.framework-config
Framework::loadConfig configFile "${FRAMEWORK_ROOT_DIR}" || Log::fatal "error while loading .framework-config file"

checkEachFunctionHasSrcFile() {
  local file="$1"
  if [[ "${file}" =~ .bats$ ]]; then
    Log::displaySkipped "checkEachFunctionHasSrcFile - File ${file} - bats file"
    return 0
  fi
  if grep -q -E "${FRAMEWORK_FILES_FUNCTION_MATCHING_IGNORE_REGEXP}" <<<"${file}"; then
    Log::displaySkipped "checkEachFunctionHasSrcFile - File ${file} - rule FRAMEWORK_FILES_FUNCTION_MATCHING_IGNORE_REGEXP matches in ${CONFIG_FILENAME}"
    return 0
  fi
  readarray -t functionsToImport < <(
    Filters::commentLines "${file}" |
      Filters::bashFrameworkFunctions |
      awk '{$1=$1};1' |
      sort |
      uniq || true
  )
  for functionToImport in "${functionsToImport[@]}"; do
    if echo "${functionToImport}" | grep -q -E "${FRAMEWORK_FUNCTIONS_IGNORE_REGEXP}"; then
      Log::displaySkipped "checkEachFunctionHasSrcFile - File ${file} - Function ${functionToImport} rule FRAMEWORK_FUNCTIONS_IGNORE_REGEXP matches in ${CONFIG_FILENAME}"
      continue
    fi
    local fileNameToImport
    fileNameToImport="$(echo "${functionToImport}" | sed -E 's#::#/#g').sh"

    local found=0
    for srcDir in "${FRAMEWORK_SRC_DIRS[@]}"; do
      if [[ -f "${srcDir}/${fileNameToImport}" ]]; then
        found=1
      fi
    done
    if [[ "${found}" = "0" ]]; then
      if [[ "${FORMAT}" = "plain" ]]; then
        Log::displayError "checkEachFunctionHasSrcFile - File ${file} - Function ${functionToImport} - does not have a matching source file ${fileNameToImport} in any source directories specified"
      else
        echo "<error severity='error' source='checkEachFunctionHasSrcFile' message='Function ${functionToImport} does not have a matching source file ${fileNameToImport} in any source directories specified'/>"
      fi
      return 1
    fi
  done
}

getRelativeSrcDir() {
  File::relativeToDir "${FRAMEWORK_SRC_DIRS[0]}" "${FRAMEWORK_ROOT_DIR}"
}

deduceBashFunctionFromSrcFile() {
  local srcFile="$1"
  local result="${srcFile%.sh}"
  result="${srcFile/$(getRelativeSrcDir)//}"
  echo "${result//\//::}"
}

checkEachSrcFileHasBatsFile() {
  local file="$1"
  if [[ "${file}" =~ ${BATS_FILE_NOT_NEEDED_REGEXP} ]]; then
    Log::displaySkipped "checkEachSrcFileHasBatsFile - File ${file} - rule BATS_FILE_NOT_NEEDED_REGEXP matches in ${CONFIG_FILENAME}"
    return 0
  fi
  if [[ ! "${file}" =~ .sh$ ]]; then
    Log::displaySkipped "checkEachSrcFileHasBatsFile - File ${file} - no suffix .sh"
    return 0
  fi
  if [[ ! "${file}" =~ ^$(getRelativeSrcDir) ]]; then
    Log::displaySkipped "checkEachSrcFileHasBatsFile - File ${file} - src directory not declared in ${CONFIG_FILENAME}"
    return 0
  fi
  if deduceBashFunctionFromSrcFile "${file}" | grep -q -E "${FRAMEWORK_FUNCTIONS_IGNORE_REGEXP}"; then
    Log::displaySkipped "checkEachSrcFileHasBatsFile - File ${file} - matching function name matches FRAMEWORK_FUNCTIONS_IGNORE_REGEXP defined in ${CONFIG_FILENAME}"
    return 0
  fi
  local batsFile="${file%.*}.bats"
  if [[ ! -f "${FRAMEWORK_ROOT_DIR}/${batsFile}" ]]; then
    reportWarning "checkEachSrcFileHasBatsFile" "${file}" \
      "missing bats file '${batsFile}'"
  fi
}

# search for at least one function that is matching the filename
checkEachSrcFileHasOneFunctionCorrectlyNamed() {
  local srcFile="$1"
  if [[ "${srcFile}" =~ ${NON_FRAMEWORK_FILES_REGEXP} ]]; then
    Log::displaySkipped "srcFileHasOneFunctionCorrectlyNamed - File ${srcFile} - rule NON_FRAMEWORK_FILES_REGEXP matches in ${CONFIG_FILENAME}"
    return 0
  fi
  if grep -q -E "${FRAMEWORK_FILES_FUNCTION_MATCHING_IGNORE_REGEXP}" <<<"${srcFile}"; then
    Log::displaySkipped "srcFileHasOneFunctionCorrectlyNamed - File ${srcFile} - rule FRAMEWORK_FILES_FUNCTION_MATCHING_IGNORE_REGEXP matches in ${CONFIG_FILENAME}"
    return 0
  fi

  local foundFunctionMatching=0
  local expectedFunctionName currentFunction
  local file="${srcFile#src/}"
  expectedFunctionName="$(sed -E 's#/#::#g' <<<"${file%.sh}")"
  if echo "${expectedFunctionName}" | grep -q -E "${FRAMEWORK_FUNCTIONS_IGNORE_REGEXP}"; then
    Log::displaySkipped "srcFileHasOneFunctionCorrectlyNamed - File ${srcFile} - Function ${expectedFunctionName} - rule FRAMEWORK_FUNCTIONS_IGNORE_REGEXP matches in ${CONFIG_FILENAME}"
    return 0
  fi

  while IFS='' read -r currentFunction; do
    if [[ "${currentFunction}" = "${expectedFunctionName}" ]]; then
      foundFunctionMatching=1
    fi
  done < <(sed -E -n 's#^([^([:blank:]]+)\(\)[[:blank:]]*\{#\1#p' "${srcFile}")

  if [[ "${foundFunctionMatching}" = "0" ]]; then
    reportWarning "srcFileHasOneFunctionCorrectlyNamed" "${srcFile}" \
      "Should contain a function named '${expectedFunctionName}'"
    return 0
  fi
}

checkEachSrcFileHasCorrectShdoc() {
  local srcFile="$1"
  if [[ "${srcFile}" =~ ${NON_FRAMEWORK_FILES_REGEXP} ]]; then
    Log::displaySkipped "checkEachSrcFileHasCorrectShDoc - File ${srcFile} - rule NON_FRAMEWORK_FILES_REGEXP matches in ${CONFIG_FILENAME}"
    return 0
  fi
  if grep -q -E "${FRAMEWORK_FILES_FUNCTION_MATCHING_IGNORE_REGEXP}" <<<"${srcFile}"; then
    Log::displaySkipped "checkEachSrcFileHasCorrectShDoc - File ${srcFile} - rule FRAMEWORK_FILES_FUNCTION_MATCHING_IGNORE_REGEXP matches in ${CONFIG_FILENAME}"
    return 0
  fi

  # @see https://regex101.com/r/H2Yrwp/1
  function filterAnnotationNames() {
    sed -n -E 's/^# @(([^ ]|$)+)[ ]*.*$/\1/p' "$@"
  }

  # @see https://regex101.com/r/5oMFQi/1
  # shellcheck disable=SC2120
  function filterInvalidAnnotationNames() {
    grep -v -E '^(name|file|brief|description|section|example|option|arg|noargs|set|env|exitcode|stdin|stdout|stderr|see|warning|require|feature|trap|deprecated|internal)$' "$@"
  }

  function checkValidAnnotationsAreUsed() {
    local srcFile="$1"
    local invalidAnnotation

    while IFS='' read -r invalidAnnotation; do
      reportError "checkEachSrcFileHasCorrectShdoc" "${srcFile}" \
        "shdoc annotation '@${invalidAnnotation}' is invalid"
    done < <(filterAnnotationNames "${srcFile}" | filterInvalidAnnotationNames)
  }

  # check that @require function exists and matches naming convention
  function checkRequiredFunctionExists() {
    local srcFile="$1"
    local requireAnnotation

    while IFS='' read -r requireAnnotation; do
      if ! Assert::bashFrameworkFunction "${requireAnnotation}"; then
        reportError "checkEachSrcFileHasCorrectShdoc" "${srcFile}" \
          "# @require ${requireAnnotation}' does not target a valid bash framework function"
        continue
      fi
      if [[ ! "${requireAnnotation}" =~ ^([A-Za-z0-9_]+[A-Za-z0-9_-]*::)+require([A-Z][a-zA-Z0-9_-]+)$ ]]; then
        reportError "checkEachSrcFileHasCorrectShdoc" "${srcFile}" \
          "# @require ${requireAnnotation}' does not target a bash framework function with naming convention Namespace::requireSomething"
        continue
      fi
      if ! Compiler::findFunctionInSrcDirs "${requireAnnotation}" "${FRAMEWORK_SRC_DIRS[@]}" >/dev/null; then
        reportError "checkEachSrcFileHasCorrectShdoc" "${srcFile}" \
          "# @require ${requireAnnotation}' does not target an existing bash framework function"
      fi
    done < <(sed -n -E 's/^# @require (.*)$/\1/p' "${srcFile}")
  }

  function checkDescriptionAnnotationIsProvided() {
    local srcFile="$1"
    if ! grep -q -E '^# @description .*' "${srcFile}"; then
      reportError "checkEachSrcFileHasCorrectShdoc" "${srcFile}" \
        "missing mandatory sh doc @description annotation"
    fi
  }

  checkValidAnnotationsAreUsed "${srcFile}"
  checkRequiredFunctionExists "${srcFile}"
  checkDescriptionAnnotationIsProvided "${srcFile}"

}

reportError() {
  local category="$1"
  local file="$2"
  local msg="$3"
  if [[ "${FORMAT}" = "plain" ]]; then
    Log::displayError "${category} - File ${file} - ${msg}"
  else
    echo "<error severity='error' source='${category}' message='$(sed -E "s/'/\"/g" <<<"${msg}")'/>"
  fi
  ((++errorCount))
}

reportWarning() {
  local category="$1"
  local file="$2"
  local msg="$3"
  if [[ "${FORMAT}" = "plain" ]]; then
    Log::displayWarning "${category} - File ${file} - ${msg}"
  else
    echo "<error severity='warning' source='${category}' message='$(sed -E "s/'/\"/g" <<<"${msg}")'/>"
  fi
  ((++warningCount))
}

((errorCount = 0)) || true
((warningCount = 0)) || true
if [[ "${FORMAT}" = "checkstyle" ]]; then
  echo "<?xml version='1.0' encoding='UTF-8'?>"
  echo "<checkstyle>"
fi
export -f File::detectBashFile
export -f Assert::bashFile

# shellcheck disable=SC2016
while IFS='' read -r file; do
  if [[ "${FORMAT}" = "checkstyle" ]]; then
    echo "<file name='${file}'>"
  fi
  Log::displayInfo "Checking file ${file}"
  checkEachFunctionHasSrcFile "${file}" "$@" || ((++errorCount))
  checkEachSrcFileHasOneFunctionCorrectlyNamed "${file}" "$@" || ((++errorCount))
  checkEachSrcFileHasBatsFile "${file}" "$@" || ((++errorCount))
  checkEachSrcFileHasCorrectShdoc "${file}" "$@" || ((++errorCount))

  if [[ "${FORMAT}" = "checkstyle" ]]; then
    echo "</file>"
  fi
done < <(
  git ls-files --exclude-standard |
    xargs -L 1 -n 1 -I@ bash -c 'File::detectBashFile "@"' ||
    true
)

# shellcheck disable=SC2154
while IFS='' read -r file; do
  if [[ "${FORMAT}" = "checkstyle" ]]; then
    echo "<file name='${file}'>"
  fi
  reportWarning "fileExistence" "${file}" \
    "File ${file} does not exist, git renamed file ?"
  if [[ "${FORMAT}" = "checkstyle" ]]; then
    echo "</file>"
  fi
done < <(cat "${missingBashFileList}" 2>/dev/null || true)

if [[ "${FORMAT}" = "checkstyle" ]]; then
  echo "</checkstyle>"
fi
if ((errorCount > 0 || warningCount > 0)); then
  if [[ "${FORMAT}" = "plain" ]]; then
    Log::displayError "${errorCount} errors/${warningCount} warnings found !"
  fi
  if ((errorCount > 0)); then
    exit 1
  fi
else
  Log::displaySuccess "No error found !"
fi

}

facade_main_a79586bd7b8a40fcabb0a2fd33ad002e "$@"
