#!/usr/bin/env bash
###############################################################################
# GENERATED FACADE FROM https://github.com/fchastanet/bash-tools-framework/tree/master/src/_binaries/generateShellDoc.sh
# DO NOT EDIT IT
###############################################################################
# shellcheck disable=SC2288,SC2034
# BIN_FILE=${FRAMEWORK_ROOT_DIR}/bin/generateShellDoc
# VAR_RELATIVE_FRAMEWORK_DIR_TO_CURRENT_DIR=..
# VAR_DEPRECATED_LOAD=1
# FACADE

# ensure that no user aliases could interfere with
# commands used in this script
unalias -a || true

# shellcheck disable=SC2034
((failures = 0)) || true

shopt -s expand_aliases

# Bash will remember & return the highest exit code in a chain of pipes.
# This way you can catch the error inside pipes, e.g. mysqldump | gzip
set -o pipefail
set -o errexit

# Command Substitution can inherit errexit option since bash v4.4
shopt -s inherit_errexit || true

# a log is generated when a command fails
set -o errtrace

# use nullglob so that (file*.php) will return an empty array if no file matches the wildcard
shopt -s nullglob

# ensure regexp are interpreted without accentuated characters
export LC_ALL=POSIX

export TERM=xterm-256color

#avoid interactive install
export DEBIAN_FRONTEND=noninteractive
export DEBCONF_NONINTERACTIVE_SEEN=true

# @see https://unix.stackexchange.com/a/386856
interruptManagement() {
  # restore SIGINT handler
  trap - INT
  # ensure that Ctrl-C is trapped by this script and not by sub process
  # report to the parent that we have indeed been interrupted
  kill -s INT "$$"
}
trap interruptManagement INT
SCRIPT_NAME=${0##*/}
REAL_SCRIPT_FILE="$(readlink -e "$(realpath "${BASH_SOURCE[0]}")")"
CURRENT_DIR="$(cd "$(readlink -e "${REAL_SCRIPT_FILE%/*}")" && pwd -P)"
COMMAND_BIN_DIR="${CURRENT_DIR}"

if [[ -t 1 || -t 2 ]]; then
  # check colors applicable https://misc.flogisoft.com/bash/tip_colors_and_formatting
  export __ERROR_COLOR='\e[31m'      # Red
  export __INFO_COLOR='\e[44m'       # white on lightBlue
  export __SUCCESS_COLOR='\e[32m'    # Green
  export __WARNING_COLOR='\e[33m'    # Yellow
  export __TEST_COLOR='\e[100m'      # Light magenta
  export __TEST_ERROR_COLOR='\e[41m' # white on red
  export __SKIPPED_COLOR='\e[33m'    # Yellow
  export __HELP_COLOR='\e[7;49;33m'  # Black on Gold
  export __DEBUG_COLOR='\e[37m'      # Grey
  # Internal: reset color
  export __RESET_COLOR='\e[0m' # Reset Color
  # shellcheck disable=SC2155,SC2034
  export __HELP_EXAMPLE="$(echo -e "\e[1;30m")"
  # shellcheck disable=SC2155,SC2034
  export __HELP_TITLE="$(echo -e "\e[1;37m")"
  # shellcheck disable=SC2155,SC2034
  export __HELP_NORMAL="$(echo -e "\033[0m")"
else
  # check colors applicable https://misc.flogisoft.com/bash/tip_colors_and_formatting
  export __ERROR_COLOR=''
  export __INFO_COLOR=''
  export __SUCCESS_COLOR=''
  export __WARNING_COLOR=''
  export __SKIPPED_COLOR=''
  export __HELP_COLOR=''
  export __TEST_COLOR=''
  export __TEST_ERROR_COLOR=''
  export __DEBUG_COLOR=''
  # Internal: reset color
  export __RESET_COLOR=''
  export __HELP_EXAMPLE=''
  export __HELP_TITLE=''
  export __HELP_NORMAL=''
fi

################################################
# Temp dir management
################################################

KEEP_TEMP_FILES="${KEEP_TEMP_FILES:-0}"
export KEEP_TEMP_FILES

# PERSISTENT_TMPDIR is not deleted by traps
PERSISTENT_TMPDIR="${TMPDIR:-/tmp}/bash-framework"
export PERSISTENT_TMPDIR
mkdir -p "${PERSISTENT_TMPDIR}"

# shellcheck disable=SC2034
TMPDIR="$(mktemp -d -p "${PERSISTENT_TMPDIR:-/tmp}" -t bash-framework-$$-XXXXXX)"
export TMPDIR

# temp dir cleaning
cleanOnExit() {
  if [[ "${KEEP_TEMP_FILES:-0}" = "1" ]]; then
    Log::displayInfo "KEEP_TEMP_FILES=1 temp files kept here '${TMPDIR}'"
  elif [[ -n "${TMPDIR+xxx}" ]]; then
    Log::displayDebug "KEEP_TEMP_FILES=0 removing temp files '${TMPDIR}'"
    rm -Rf "${TMPDIR:-/tmp/fake}" >/dev/null 2>&1
  fi
}
trap cleanOnExit EXIT HUP QUIT ABRT TERM

# @description change display level to verboseDisplayLevel argument if --verbose|-v option is parsed in arguments
# @arg $1 verboseDisplayLevel:String the level of verbosity to set
# @arg $@ args:String[] list of options
# @option -v short verbose option
# @option --verbose long verbose option
# @set ARGS_VERBOSE 1 if --verbose|-v option is parsed in arguments
# @set BASH_FRAMEWORK_DISPLAY_LEVEL to verboseDisplayLevel if --verbose|-v option is parsed in arguments
# @exitcode 1 if --verbose|-v option is not present in args list
Args::parseVerbose() {
  local verboseDisplayLevel="$1"
  declare -gx ARGS_VERBOSE=0
  shift || true
  local status=1
  while true; do
    if [[ "$1" = "--verbose" || "$1" = "-v" ]]; then
      status=0
      ARGS_VERBOSE=1
      break
    fi
    shift || break
  done
  if [[ "${status}" = "0" ]]; then
    export BASH_FRAMEWORK_DISPLAY_LEVEL=${verboseDisplayLevel}
  fi
  return "${status}"
}

# @description remove elements from array
# @arg $1 arrayRemoveArray:&String[] (reference) array from which elements have to be removed
# @arg $@ valuesToRemoveKeys:String[] list of elements to remove
# @warning Performance1 : version taken from https://stackoverflow.com/a/59030460
# @warning Performance2 : for multiple values to remove, prefer using Array::removeIf
# @see Array::removeIf
Array::remove() {
  local -n arrayRemoveArray=$1
  shift || true # $@ contains elements to remove
  local -A valuesToRemoveKeys=()

  # Tag items to remove
  local del
  for del in "$@"; do valuesToRemoveKeys[${del}]=1; done

  # remove items
  local k
  for k in "${!arrayRemoveArray[@]}"; do
    if [[ -n "${valuesToRemoveKeys[${arrayRemoveArray[k]}]+xxx}" ]]; then
      unset 'arrayRemoveArray[k]'
    fi
  done

  # compaction (element re-indexing, because unset makes "holes" in array )
  arrayRemoveArray=("${arrayRemoveArray[@]}")
}

# Checks if file can be created in folder
#

# @description Checks if file can be created in folder
# The file does not need to exist
# @arg $1 file:String
# @exitcode 1 if file is not a valid path
# @exitcode 2 if file parent's dir is not writable
# @exitcode 3 if existing file is not writable
# @see Assert::validPath
Assert::fileWritable() {
  local file="$1"
  local dir

  Assert::validPath "${file}" || return 1
  if [[ -f "${file}" ]]; then
    [[ -w "${file}" ]] || return 3
  else
    dir="$(dirname "${file}")"
    [[ -w "${dir}" ]] || return 2
  fi

}

# lazy initialization
declare -g BASH_FRAMEWORK_CACHED_ENV_FILE
declare -g BASH_FRAMEWORK_DEFAULT_ENV_FILE

# @description load variables in order(from less specific to more specific) from :
# - ${FRAMEWORK_ROOT_DIR}/src/Env/testsData/.env file
# - ${FRAMEWORK_ROOT_DIR}/conf/.env file if exists
# - ~/.env file if exists
# - ~/.bash-tools/.env file if exists
# - BASH_FRAMEWORK_ENV_FILEPATH=<fullPathToEnvFile or empty if no file to be loaded>
#
# @env BASH_FRAMEWORK_INITIALIZED if 1 skip the load
# @env FRAMEWORK_ROOT_DIR
# @env HOME
# @env BASH_FRAMEWORK_ENV_FILEPATH
# @env OVERRIDE_* string allows to override any env file variable (with * name)
#
# @set BASH_FRAMEWORK_CACHED_ENV_FILE string
# @set BASH_FRAMEWORK_DEFAULT_ENV_FILE string
# @set BASH_FRAMEWORK_INITIALIZED int 1 if load successful
Env::load() {
  if [[ "${BASH_FRAMEWORK_INITIALIZED:-0}" = "1" ]]; then
    return 0
  fi
  BASH_FRAMEWORK_CACHED_ENV_FILE="$(mktemp -p "${TMPDIR:-/tmp}" -t "env_vars.XXXXXXX")"
  BASH_FRAMEWORK_DEFAULT_ENV_FILE="$(mktemp -p "${TMPDIR:-/tmp}" -t "default_env_file.XXXXXXX")"
  # shellcheck source=src/Env/testsData/.env
  (
    echo "BASH_FRAMEWORK_LOG_LEVEL=${BASH_FRAMEWORK_LOG_LEVEL:-0}"
    echo "BASH_FRAMEWORK_DISPLAY_LEVEL=${BASH_FRAMEWORK_DISPLAY_LEVEL:-3}"
    echo "BASH_FRAMEWORK_LOG_FILE=${BASH_FRAMEWORK_LOG_FILE:-${FRAMEWORK_ROOT_DIR}/logs/${SCRIPT_NAME}.log}"
    echo "BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION=${BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION:-5}"
  ) >"${BASH_FRAMEWORK_DEFAULT_ENV_FILE}"

  (
    # reset temp file
    echo >"${BASH_FRAMEWORK_CACHED_ENV_FILE}"

    # list .env files that need to be loaded
    local -a files=()
    if [[ -f "${BASH_FRAMEWORK_DEFAULT_ENV_FILE}" ]]; then
      files+=("${BASH_FRAMEWORK_DEFAULT_ENV_FILE}")
    fi
    if [[ -f "${FRAMEWORK_ROOT_DIR}/conf/.env" && -r "${FRAMEWORK_ROOT_DIR}/conf/.env" ]]; then
      files+=("${FRAMEWORK_ROOT_DIR}/conf/.env")
    fi
    if [[ -f "${HOME}/.env" && -r "${HOME}/.env" ]]; then
      files+=("${HOME}/.env")
    fi
    local file
    for file in "$@"; do
      if [[ -f "${file}" && -r "${file}" ]]; then
        files+=("${file}")
      fi
    done
    # import custom .env file
    if [[ -n "${BASH_FRAMEWORK_ENV_FILEPATH+xxx}" ]]; then
      # load BASH_FRAMEWORK_ENV_FILEPATH
      if [[ -f "${BASH_FRAMEWORK_ENV_FILEPATH}" && -r "${BASH_FRAMEWORK_ENV_FILEPATH}" ]]; then
        files+=("${BASH_FRAMEWORK_ENV_FILEPATH}")
      else
        Log::displayWarning "env file not not found - ${BASH_FRAMEWORK_ENV_FILEPATH}"
      fi
    fi

    # add all files added as parameters
    files+=("$@")

    # source each file in order
    local file
    for file in "${files[@]}"; do
      # shellcheck source=src/Env/testsData/.env
      source "${file}" || {
        Log::displayWarning "Cannot load '${file}'"
      }
    done

    # copy only the variables to the tmp file
    local varName overrideVarName
    while IFS=$'\n' read -r varName; do
      overrideVarName="OVERRIDE_${varName}"
      if [[ -z ${!overrideVarName+xxx} ]]; then
        echo "${varName}='${!varName}'" >>"${BASH_FRAMEWORK_CACHED_ENV_FILE}"
      else
        # variable is overridden
        echo "${varName}='${!overrideVarName}'" >>"${BASH_FRAMEWORK_CACHED_ENV_FILE}"
      fi

      # using awk deduce all variables that need to be copied in tmp file
      #   from less specific file to the most
    done < <(awk -F= '!a[$1]++' "${files[@]}" | grep -v '^$\|^\s*\#' | cut -d= -f1)
  ) || exit 1

  # ensure all sourced variables will be exported
  set -o allexport

  # Finally load the temp file to make the variables available in current script
  # shellcheck source=src/Env/testsData/.env
  source "${BASH_FRAMEWORK_CACHED_ENV_FILE}"

  set +o allexport
  BASH_FRAMEWORK_INITIALIZED=1
}

# @description prepend directories to the PATH environment variable
# @arg $@ args:String[] list of directories to prepend
# @set PATH update PATH with the directories prepended
Env::pathPrepend() {
  local arg
  for arg in "$@"; do
    if [[ -d "${arg}" && ":${PATH}:" != *":${arg}:"* ]]; then
      PATH="$(realpath "${arg}"):${PATH}"
    fi
  done
}

# @description Log namespace provides 2 kind of functions
# - Log::display* allows to display given message with
#   given display level
# - Log::log* allows to log given message with
#   given log level
# Log::display* functions automatically log the message too
# @see Log::load to load the display and log level from .env file

# @description log level off
export __LEVEL_OFF=0
# @description log level error
export __LEVEL_ERROR=1
# @description log level warning
export __LEVEL_WARNING=2
# @description log level info
export __LEVEL_INFO=3
# @description log level success
export __LEVEL_SUCCESS=3
# @description log level debug
export __LEVEL_DEBUG=4

export __LEVEL_OFF
export __LEVEL_ERROR
export __LEVEL_WARNING
export __LEVEL_INFO
export __LEVEL_SUCCESS
export __LEVEL_DEBUG

# @description Display message using debug color (grey)
# @arg $1 message:String the message to display
Log::displayDebug() {
  echo -e "${__DEBUG_COLOR}DEBUG   - ${1}${__RESET_COLOR}" >&2
  Log::logDebug "$1"
}

# @description Display message using info color (bg light blue/fg white)
# @arg $1 message:String the message to display
Log::displayInfo() {
  local type="${2:-INFO}"
  echo -e "${__INFO_COLOR}${type}    - ${1}${__RESET_COLOR}" >&2
  Log::logInfo "$1" "${type}"
}

# @description Display message using error color (red) and exit immediately with error status 1
# @arg $1 message:String the message to display
Log::fatal() {
  echo -e "${__ERROR_COLOR}FATAL   - ${1}${__RESET_COLOR}" >&2
  Log::logFatal "$1"
  exit 1
}

# shellcheck disable=SC2317

# @description activate or not Log::display* and Log::log* functions
# based on BASH_FRAMEWORK_DISPLAY_LEVEL and BASH_FRAMEWORK_LOG_LEVEL
# environment variables
# try to create log file and rotate it if necessary
# @noargs
# @set BASH_FRAMEWORK_LOG_LEVEL int to OFF level if BASH_FRAMEWORK_LOG_FILE is empty or not writable
# @env BASH_FRAMEWORK_DISPLAY_LEVEL int
# @env BASH_FRAMEWORK_LOG_LEVEL int
# @env BASH_FRAMEWORK_LOG_FILE String
# @env BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION int do log rotation if > 0
# @exitcode 0 always successful
# @stderr diagnostics information about log file is displayed
Log::load() {
  # disable display methods following display level
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL < __LEVEL_DEBUG)); then
    Log::displayDebug() { :; }
  fi
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL < __LEVEL_INFO)); then
    Log::displayHelp() { :; }
    Log::displayInfo() { :; }
    Log::displaySkipped() { :; }
    Log::displaySuccess() { :; }
  fi
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL < __LEVEL_WARNING)); then
    Log::displayWarning() { :; }
    Log::displayStatus() { :; }
  fi
  if ((BASH_FRAMEWORK_DISPLAY_LEVEL < __LEVEL_ERROR)); then
    Log::displayError() { :; }
  fi
  # disable log methods following log level
  if ((BASH_FRAMEWORK_LOG_LEVEL < __LEVEL_DEBUG)); then
    Log::logDebug() { :; }
  fi
  if ((BASH_FRAMEWORK_LOG_LEVEL < __LEVEL_INFO)); then
    Log::logHelp() { :; }
    Log::logInfo() { :; }
    Log::logSkipped() { :; }
    Log::logSuccess() { :; }
  fi
  if ((BASH_FRAMEWORK_LOG_LEVEL < __LEVEL_WARNING)); then
    Log::logWarning() { :; }
    Log::logStatus() { :; }
  fi
  if ((BASH_FRAMEWORK_LOG_LEVEL < __LEVEL_ERROR)); then
    Log::logError() { :; }
  fi

  if ((BASH_FRAMEWORK_LOG_LEVEL > __LEVEL_OFF)); then
    if [[ -z "${BASH_FRAMEWORK_LOG_FILE}" ]]; then
      BASH_FRAMEWORK_LOG_LEVEL=${__LEVEL_OFF}
      export BASH_FRAMEWORK_LOG_LEVEL
    elif [[ ! -f "${BASH_FRAMEWORK_LOG_FILE}" ]]; then
      if ! mkdir -p "$(dirname "${BASH_FRAMEWORK_LOG_FILE}")" 2>/dev/null; then
        BASH_FRAMEWORK_LOG_LEVEL=__LEVEL_OFF
        Log::displayWarning "Log dir cannot be created $(dirname "${BASH_FRAMEWORK_LOG_FILE}")"
      fi
      if ! touch --no-create "${BASH_FRAMEWORK_LOG_FILE}" 2>/dev/null; then
        BASH_FRAMEWORK_LOG_LEVEL=__LEVEL_OFF
        Log::displayWarning "Log file '${BASH_FRAMEWORK_LOG_FILE}' cannot be created"
      fi
    fi
    Log::displayInfo "Logging to file ${BASH_FRAMEWORK_LOG_FILE}"
    if ((BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION > 0)); then
      Log::rotate "${BASH_FRAMEWORK_LOG_FILE}" "${BASH_FRAMEWORK_LOG_FILE_MAX_ROTATION}"
    fi
  fi
}

# @description generate doc + index
# @arg $1 fromDir:String
# @arg $2 fromDirRelative:String
# @arg $3 docDir:String
# @arg $4 indexFile:String
# @arg $5 repositoryUrl:String base url for src file (eg:https://github.com/fchastanet/bash-tools-framework)
# @arg $6 excludeDirectoriesPattern:String grep exclude pattern. Eg: '/testsData|/_.*'
# @arg $7 excludeFilesPattern:String grep exclude pattern. Eg: '(/_\.sh|/ZZZ\.sh|/__all\.sh)$'
ShellDoc::generateShellDocsFromDir() {
  local fromDir="$1"
  local fromDirRelative="$2"
  local docDir="$3"
  local indexFile="$4"
  local repositoryUrl="${5:-}"
  local excludeDirectoriesPattern="${6:-}"
  local excludeFilesPattern="${7:-}"

  # exclude dir pattern
  local -a grepExclude
  if [[ -z "${excludeDirectoriesPattern}" ]]; then
    grepExclude=(cat)
  else
    grepExclude=(grep -E -v "${excludeDirectoriesPattern}")
  fi

  # generate one .md per directory
  local relativeDir
  local targetDocFile
  local targetDocFileRelative

  while IFS= read -r relativeDir; do
    relativeDir="${relativeDir#./}"
    targetDocFile="${docDir}/${relativeDir}.md"
    targetDocFileRelative="$(realpath --canonicalize-missing --relative-to "$(dirname "${indexFile}")" "${targetDocFile}")"

    mkdir -p "$(dirname "${targetDocFile}")" || true
    if ShellDoc::generateShellDocDir \
      "${fromDir}/${relativeDir}" \
      "${fromDirRelative}/${relativeDir}" \
      "${targetDocFile}" \
      "${repositoryUrl}" \
      "${excludeFilesPattern}" && [[ -n "$(tail -n +6 "${targetDocFile}")" ]]; then
      ShellDoc::appendDocToIndex "${indexFile}" "${targetDocFileRelative}" "${relativeDir}"
    else
      rm -f "${targetDocFile}" || true
      Log::displaySkipped "${fromDir}/${relativeDir} does not contain any documentation"
    fi
  done < <(cd "${fromDir}" && find . -type d -name '[^.]*' | "${grepExclude[@]}" | LC_ALL=C sort)
}

# @description check if argument is a valid linux path
# invalid path are those with:
# - invalid characters
# - component beginning by a - (because could be considered as a command's option)
# - not beginning with a slash
# - relative
#
# @arg $1 path:string path that needs to be checked
# @exitcode 1 if path is invalid
# @see https://regex101.com/r/afLrmM/2
# @see Assert::validPosixPath if you need more restrictive check
Assert::validPath() {
  local path="$1"

  [[ "${path}" =~ ^\/$|^(\/[.a-zA-Z_0-9][.a-zA-Z_0-9-]*)+$ ]] &&
    [[ ! "${path}" =~ (\/\.\.)|(\.\.\/)|^\.$|^\.\.$ ]] # avoid relative
}

# @description Display message using error color (red)
# @arg $1 message:String the message to display
Log::displayError() {
  echo -e "${__ERROR_COLOR}ERROR   - ${1}${__RESET_COLOR}" >&2
  Log::logError "$1"
}

# @description Display message using info color (bg light blue/fg white)
# @arg $1 message:String the message to display
Log::displayHelp() {
  local type="${2:-HELP}"
  echo -e "${__HELP_COLOR}${type}    - ${1}${__RESET_COLOR}" >&2
  Log::logHelp "$1" "${type}"
}

# @description Display message using skip color (yellow)
# @arg $1 message:String the message to display
Log::displaySkipped() {
  echo -e "${__SKIPPED_COLOR}SKIPPED - ${1}${__RESET_COLOR}" >&2
  Log::logSkipped "$1"
}

# @description Display message using info color (blue) but warning level
# @arg $1 message:String the message to display
Log::displayStatus() {
  local type="${2:-STATUS}"
  echo -e "${__INFO_COLOR}${type}  - ${1}${__RESET_COLOR}" >&2
  Log::logStatus "$1" "${type}"
}

# @description Display message using success color (bg green/fg white)
# @arg $1 message:String the message to display
Log::displaySuccess() {
  echo -e "${__SUCCESS_COLOR}SUCCESS - ${1}${__RESET_COLOR}" >&2
  Log::logSuccess "$1"
}

# @description Display message using warning color (yellow)
# @arg $1 message:String the message to display
Log::displayWarning() {
  echo -e "${__WARNING_COLOR}WARN    - ${1}${__RESET_COLOR}" >&2
  Log::logWarning "$1"
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logDebug() {
  Log::logMessage "${2:-DEBUG}" "$1"
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logError() {
  Log::logMessage "${2:-ERROR}" "$1"
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logFatal() {
  Log::logMessage "${2:-FATAL}" "$1"
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logHelp() {
  Log::logMessage "${2:-HELP}" "$1"
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logInfo() {
  Log::logMessage "${2:-INFO}" "$1"
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logSkipped() {
  Log::logMessage "${2:-SKIPPED}" "$1"
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logStatus() {
  Log::logMessage "${2:-STATUS}" "$1"
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logSuccess() {
  Log::logMessage "${2:-SUCCESS}" "$1"
}

# @description log message to file
# @arg $1 message:String the message to display
Log::logWarning() {
  Log::logMessage "${2:-WARNING}" "$1"
}

# @description To be called before logging in the log file
# @arg $1 file:string log file name
# @arg $2 maxLogFilesCount:int maximum number of log files
Log::rotate() {
  local file="$1"
  local maxLogFilesCount="${2:-5}"

  if [[ ! -f "${file}" ]]; then
    Log::displaySkipped "Log file ${file} doesn't exist yet"
    return 0
  fi
  for i in $(seq $((maxLogFilesCount - 1)) -1 1); do
    Log::displayInfo "Log rotation ${file}.${i} to ${file}.$((i + 1))"
    mv "${file}."{"${i}","$((i + 1))"} &>/dev/null || true
  done
  if cp "${file}" "${file}.1" &>/dev/null; then
    echo >"${file}" # reset log file
    Log::displayInfo "Log rotation ${file} to ${file}.1"
  fi
}

# @description add reference to index file (using docsify embed feature)
# @arg $1 indexFile:String
# @arg $2 mdRelativeFile:String
# @arg $3 title:String
ShellDoc::appendDocToIndex() {
  local indexFile="$1"
  local mdRelativeFile="$2"
  local title="$3"

  (
    echo "[${title}](${mdRelativeFile} ':include')"
    echo
  ) >>"${indexFile}"
}

# @description generate shell doc file from given directory
#
# @arg $1 dir:String
# @arg $2 relativeDir:String
# @arg $3 targetDocFile:String the markdown file generated using shdoc
# @arg $4 repositoryUrl:String base url for src file (eg:https://github.com/fchastanet/bash-tools-framework)
# @arg $5 excludeFilesPattern:String grep exclude pattern. Eg: '(/_\.sh|/ZZZ\.sh|/__all\.sh)$'
# @exitcode 0 if file has been generated
# @exitcode 1 if file is empty or error
ShellDoc::generateShellDocDir() {
  local dir="$1"
  local relativeDir="$2"
  local targetDocFile="$3"
  local repositoryUrl="${4:-}"
  local excludeFilesPattern="${5:-}"
  local namespaceFile
  local relativeFile

  local -a grepExclude
  if [[ -z "${excludeFilesPattern}" ]]; then
    grepExclude=(cat)
  else
    grepExclude=(grep -E -v "${excludeFilesPattern}")
  fi

  namespaceFile="$(mktemp -p "${TMPDIR:-/tmp}" -t bash-tools-shdoc-namespace-XXXXXX)"
  Log::displayInfo "Generating ${targetDocFile} based on ${namespaceFile}"

  (
    local firstFile=1
    # generate one big sh file with all sh files of the directory
    echo '#!/usr/bin/env bash' >"${namespaceFile}"
    echo "# @name ${relativeDir}" >>"${namespaceFile}"
    while IFS= read -r relativeFile; do
      relativeFile="${relativeFile#./}"
      (
        if [[ "${firstFile}" = "1" && "${relativeFile}" != "_.sh" ]]; then
          (
            echo "# @description Directory ${relativeDir}"
            echo
          ) >>"${namespaceFile}"
        fi

        echo "# @section ${relativeDir}/${relativeFile}"
        if [[ -n "${repositoryUrl}" ]]; then
          echo "# @description [file source ${relativeDir}/${relativeFile}](${repositoryUrl}/tree/master/${relativeDir}/${relativeFile})"
        else
          echo "# @description file source ${relativeDir}/${relativeFile}"
        fi
        awk NR\>1 "${dir}/${relativeFile}" | # remove shebang
          # remove unwanted strings
          sed -E \
            -e '/^# cspell:disable$/d' \
            -e '/^# cspell:enable$/d'
      ) >>"${namespaceFile}"
      firstFile=0
    done < <(cd "${dir}" && find . -maxdepth 1 -name "*.sh" | "${grepExclude[@]}" | LC_ALL=C sort)

    local doc
    doc="$(ShellDoc::generateShellDoc "${namespaceFile}")"
    if (("$(grep -c . <<<"${doc}")" > 1)); then
      # remove index that is auto managed by docsify
      # increment title level by one (#)
      sed -E \
        -e '/^## Index/,/## /d' \
        -e 's/^(##*) (.*)$/#\1 \2/' \
        <<<"${doc}" >"${targetDocFile}"
      return 0
    else
      return 1
    fi
  )
}

# @description Internal: common log message
# @example text
#   [date]|[levelMsg]|message
#
# @example text
#   2020-01-19 19:20:21|ERROR  |log error
#   2020-01-19 19:20:21|SKIPPED|log skipped
#
# @arg $1 levelMsg:String message's level description (eg: STATUS, ERROR, ...)
# @arg $2 msg:String the message to display
# @env BASH_FRAMEWORK_LOG_FILE String log file to use, do nothing if empty
# @env BASH_FRAMEWORK_LOG_LEVEL int log level log only if > OFF or fatal messages
# @stderr diagnostics information is displayed
Log::logMessage() {
  local levelMsg="$1"
  local msg="$2"
  local date

  if [[ -z "${BASH_FRAMEWORK_LOG_FILE}" ]]; then
    return 0
  fi
  if ((BASH_FRAMEWORK_LOG_LEVEL > __LEVEL_OFF)) || [[ "${levelMsg}" = "FATAL" ]]; then
    mkdir -p "$(dirname "${BASH_FRAMEWORK_LOG_FILE}")" || true
    if Assert::fileWritable "${BASH_FRAMEWORK_LOG_FILE}"; then
      date="$(date '+%Y-%m-%d %H:%M:%S')"
      touch "${BASH_FRAMEWORK_LOG_FILE}"
      printf "%s|%7s|%s\n" "${date}" "${levelMsg}" "${msg}" >>"${BASH_FRAMEWORK_LOG_FILE}"
    else
      echo -e "${__ERROR_COLOR}ERROR   - File ${BASH_FRAMEWORK_LOG_FILE} is not writable${__RESET_COLOR}" >&2
    fi
  fi
}

# @description extract shDoc from file
#
# @arg $1 file:String
# @stdout the shell documentation in markdown format
ShellDoc::generateShellDoc() {
  local file="$1"

  ShellDoc::installRequirementsIfNeeded
  (
    "${FRAMEWORK_VENDOR_DIR}//shdoc/shdoc" <"${file}" || {
      Log::displayError "parse error of file ${file}"
      return 0
    }
  ) || true
}

BASH_FRAMEWORK_SHDOC_INSTALLED_PATH="vendor/.shDocInstalled"
BASH_FRAMEWORK_SHDOC_CHECK_TIMEOUT=86400 # 1 day

# @description install requirements to execute shdoc
# @warning cloning is skipped if vendor/.shDocInstalled file exists
# @warning a new check is done everyday
# @warning repository is not updated if a change is detected
# @env BASH_FRAMEWORK_SHDOC_CHECK_TIMEOUT int default value 86400 (86400 seconds = 1 day)
# @set BASH_FRAMEWORK_SHDOC_INSTALLED String the file created when git clone succeeded
# @see https://github.com/fchastanet/shdoc
# @stderr diagnostics information is displayed
# @feature Git::cloneOrPullIfNoChanges
ShellDoc::installRequirementsIfNeeded() {
  local BASH_FRAMEWORK_SHDOC_INSTALLED="${FRAMEWORK_ROOT_DIR}/${BASH_FRAMEWORK_SHDOC_INSTALLED_PATH}"
  if [[ "$(
    Cache::getFileContentIfNotExpired \
      "${BASH_FRAMEWORK_SHDOC_INSTALLED}" \
      "${BASH_FRAMEWORK_SHDOC_CHECK_TIMEOUT}"
  )" != "1" ]]; then
    Log::displayInfo "Check if shdoc is up to date"
    if GIT_CLONE_OPTIONS="--recursive" Git::cloneOrPullIfNoChanges \
      "${FRAMEWORK_VENDOR_DIR:-${FRAMEWORK_ROOT_DIR}/vendor}/shdoc" \
      "https://github.com/fchastanet/shdoc.git"; then
      echo "1" >"${BASH_FRAMEWORK_SHDOC_INSTALLED}"
    else
      Log::fatal "unable to install shdoc library"
    fi
  fi
}

# @description get file content if file not expired
# @arg $1 file:String the file to get content from
# @arg $2 maxDuration:int number of seconds after which the file is considered expired
# @stdout {String} the file content if not expired
# @exitcode 1 if file does not exists
# @exitcode 2 if file expired
Cache::getFileContentIfNotExpired() {
  local file="$1"
  local maxDuration="$2"

  if [[ ! -f "${file}" ]]; then
    return 1
  fi
  if (($(File::elapsedTimeSinceLastModification "${file}") > maxDuration)); then
    return 2
  fi
  cat "${file}"
}

# @description clone the repository if not done yet, else pull it if no change in it
# @arg $1 dir:String directory in which repository is installed or will be cloned
# @arg $2 repo:String repository url
# @arg $3 cloneCallback:Function callback on successful clone
# @arg $4 pullCallback:Function callback on successful pull
# @env GIT_CLONE_OPTIONS:String additional options to pass to git clone command
# @exitcode 0 on successful pulling/cloning, 1 on failure
Git::cloneOrPullIfNoChanges() {
  local dir="$1"
  shift || true
  local repo="$1"
  shift || true
  local cloneCallback=${1:-}
  shift || true
  local pullCallback=${1:-}
  shift || true

  if [[ -d "${dir}/.git" ]]; then
    Git::pullIfNoChanges "${dir}" && (
      # shellcheck disable=SC2086
      if [[ "$(type -t ${pullCallback})" = "function" ]]; then
        ${pullCallback} "${dir}"
      fi
    )
  else
    Log::displayInfo "cloning ${repo} ..."
    mkdir -p "$(dirname "${dir}")"
    # shellcheck disable=SC2086
    git clone ${GIT_CLONE_OPTIONS} --progress "$@" "${repo}" "${dir}" && (
      # shellcheck disable=SC2086
      if [[ "$(type -t ${cloneCallback})" = "function" ]]; then
        ${cloneCallback} "${dir}"
      fi
    )
  fi
}

# @description get number of seconds since last modification of the file
# @arg $1 file:String file path
# @exitcode 1 if file does not exist
# @stdout number of seconds since last modification of the file
File::elapsedTimeSinceLastModification() {
  local file="$1"
  if [[ ! -f "${file}" ]]; then
    return 1
  fi
  local lastModificationTimeSeconds diff
  lastModificationTimeSeconds="$(stat -c %Y "${file}")"
  ((diff = $(date +%s) - lastModificationTimeSeconds))
  echo -n "${diff}"
}

# @description pull git directory only if no change has been detected
# @arg $1 dir:String the git directory to pull
# @exitcode 0 on successful pulling
# @exitcode 1 on any other failure
# @exitcode 2 changes detected, pull avoided
# @exitcode 3 not a git directory
# @exitcode 4 not able to update index
# @stderr diagnostics information is displayed
# @require Git::requireGitCommand
Git::pullIfNoChanges() {
  local dir="$1"
  if [[ ! -d "${dir}/.git" ]]; then
    return 3
  fi
  (
    cd "${dir}" || exit 3
    git update-index --refresh &>/dev/null || exit 4
    if ! git diff-index --quiet HEAD --; then
      Log::displayWarning "Pulling git repository '${dir}' avoided as changes detected"
      exit 2
    fi
    Log::displayInfo "Pull git repository '${dir}' as no changes detected"
    git pull --progress
  )
}

# @description ensure command git is available
# @exitcode 1 if git command not available
# @stderr diagnostics information is displayed
Git::requireGitCommand() {
  Assert::commandExists git
}

# @description check if command specified exists or return 1
# with error and message if not
#
# @arg $1 commandName:String on which existence must be checked
# @arg $2 helpIfNotExists:String a help command to display if the command does not exist
#
# @exitcode 1 if the command specified does not exist
# @stderr diagnostic information + help if second argument is provided
Assert::commandExists() {
  local commandName="$1"
  local helpIfNotExists="$2"

  "${BASH_FRAMEWORK_COMMAND:-command}" -v "${commandName}" >/dev/null 2>/dev/null || {
    Log::displayError "${commandName} is not installed, please install it"
    if [[ -n "${helpIfNotExists}" ]]; then
      Log::displayInfo "${helpIfNotExists}"
    fi
    return 1
  }
  return 0
}

# FUNCTIONS

facade_main_2d702b95a1b54501b15b75a6d7a84971() {
FRAMEWORK_ROOT_DIR="$(cd "${CURRENT_DIR}/.." && pwd -P)"
FRAMEWORK_SRC_DIR="${FRAMEWORK_ROOT_DIR}/src"
FRAMEWORK_BIN_DIR="${FRAMEWORK_ROOT_DIR}/bin"
FRAMEWORK_VENDOR_DIR="${FRAMEWORK_ROOT_DIR}/vendor"
FRAMEWORK_VENDOR_BIN_DIR="${FRAMEWORK_ROOT_DIR}/vendor/bin"
Env::load
export BASH_FRAMEWORK_DISPLAY_LEVEL="${__LEVEL_WARNING}"
Args::parseVerbose "${__LEVEL_INFO}" "$@" || true
declare -a args=("$@")
Array::remove args -v --verbose
set -- "${args[@]}"
Log::load
Env::pathPrepend "${COMMAND_BIN_DIR}"
# prepare bin directory for eventual bin files generated by Compiler::Embed::embed
mkdir -p "${TMPDIR:-/tmp}/bin"
Env::pathPrepend "${TMPDIR:-/tmp}/bin"
# REQUIRES
Git::requireGitCommand

# Usage info
showHelp() {
  cat <<EOF
${__HELP_TITLE}Description:${__HELP_NORMAL} find all .sh files and generate shDoc
in markdown format in the specified target directory

${__HELP_TITLE}Usage:${__HELP_NORMAL} ${SCRIPT_NAME} [-h|--help] prints this help and exits
${__HELP_TITLE}Usage:${__HELP_NORMAL} ${SCRIPT_NAME} {fromDir} {docDir} {indexFile}

  --help,-h : prints this help and exits
  fromDir   : directory from which sh files will be searched
  docDir    : target doc directory
  indexFile : the markdown index file

${__HELP_TITLE}Author:${__HELP_NORMAL}
[François Chastanet](https://github.com/fchastanet)

${__HELP_TITLE}Source file:${__HELP_NORMAL}
https://github.com/fchastanet/bash-tools-framework/tree/master/src/_binaries/generateShellDoc.sh

${__HELP_TITLE}License:${__HELP_NORMAL}
MIT License

Copyright (c) 2022 François Chastanet
EOF
}

# read command parameters
# $@ is all command line parameters passed to the script.
# -o is for short options like -h
# -l is for long options with double dash like --help
# the comma separates different long options
options=$(getopt -l help -o h -- "$@" 2>/dev/null) || {
  showHelp
  Log::fatal "invalid options specified"
}

eval set -- "${options}"
while true; do
  case $1 in
    -h | --help)
      showHelp
      exit 0
      ;;
    --)
      shift || true
      break
      ;;
    *)
      showHelp
      Log::fatal "invalid argument $1"
      ;;
  esac
  shift || true
done

if (($# != 3)); then
  Log::fatal "you should provide exactly 3 parameters"
fi

declare fromDir="$1"
declare docDir="$2"
declare indexFile="$3"

fromDir="$(realpath "${fromDir}")"
docDir="$(realpath "${docDir}")"
indexFile="$(realpath "${indexFile}")"

if [[ ! -d "${fromDir}" ]]; then
  Log::fatal "From directory '${fromDir}' does not exists"
fi
if [[ ! -r "${fromDir}" ]]; then
  Log::fatal "From directory '${fromDir}' is not readable"
fi

mkdir -p "${docDir}" || true
if [[ ! -w "${docDir}" ]]; then
  Log::fatal "From directory '${fromDir}' is not writeable"
fi

if ! Assert::fileWritable "${indexFile}"; then
  Log::fatal "File ${indexFile} is not writeable"
fi

# reset index file
if [[ -f "${indexFile}" ]]; then
  echo >"${indexFile}"
fi

ShellDoc::generateShellDocsFromDir \
  "${fromDir}" \
  "${docDir}" \
  "${indexFile}"

}

facade_main_2d702b95a1b54501b15b75a6d7a84971 "$@"
