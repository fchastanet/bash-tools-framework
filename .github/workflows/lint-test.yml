name: Workflow executed at each push
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  linters:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        vendor:
          - ubuntu
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Download hadolint and make available in path
        shell: bash
        run: |
          mkdir -p bin || true
          wget -q -O bin/hadolint \
            "https://github.com/hadolint/hadolint/releases/download/v2.8.0/hadolint-Linux-x86_64"
          chmod +x bin/hadolint
          echo "$(pwd)/bin" >> "${GITHUB_PATH}"
      - name: Install vendors (shellcheck follow source during linting)
        shell: bash
        run: ./build/installBuildDeps.sh
      - name: Linting - Shellcheck
        run: ./bin/linters/shellcheck.sh | tee logs/shellcheck-checkstyle.xml
      - name: Linting - Awk
        run: ./bin/linters/awkLint.sh | tee logs/awk-checkstyle.xml
      - name: Linting - Dockerfile
        run: ./bin/linters/dockerLint.sh | tee logs/docker-checkstyle.xml
      - uses: jwgmeligmeyling/checkstyle-github-action@master
        with:
          path: 'logs/*-checkstyle.xml'
      - name: Archive results
        uses: actions/upload-artifact@v2
        with:
          name: linter-reports
          path: |
            logs/*.xml
            logs/*.log

  buildDockerImages:
    needs: linters
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        vendor:
          - ubuntu
          - alpine
        bashTarVersion:
          - '4.4'
          - '5.0'
          - '5.1'
        include:
          - vendor: ubuntu
            bashImage: ubuntu:20.04
          - vendor: alpine
            bashImage: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Pull/Build/Push docker image
        env:
          BRANCH: ${{ github.ref }}
          PUSH: push
        run: |
          ./.github/buildScripts/buildPushDockerImages.sh "${{ matrix.vendor }}" \
          "${{ matrix.bashTarVersion }}" "${{ matrix.bashImage }}" "${BRANCH}" \
          "${PUSH}"
      - name: Check image
        run:
          docker run --rm "bash-tools-${{ matrix.vendor }}-${{
          matrix.bashTarVersion }}" bash --version

  testDoc:
    needs: buildDockerImages
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        vendor:
          - ubuntu
        bashTarVersion:
          - '5.1'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: docker pull image
        run: docker pull scrasnups/build:bash-tools-ubuntu-5.1
      - name: Check if doc up to date
        run: |
          ./doc.sh
          if ! git diff --exit-code; then
            (>&2 echo "Documentation not up to date, please run doc.sh to update it")
            exit 1
          fi

  tests:
    needs: buildDockerImages
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        vendor:
          - ubuntu
          - alpine
        bashTarVersion:
          - '4.4'
          - '5.0'
          - '5.1'
        include:
          - vendor: ubuntu
            bashImage: ubuntu:20.04
          - vendor: alpine
            bashImage: bash
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: docker pull image
        run:
          docker pull scrasnups/build:bash-tools-${{ matrix.vendor }}-${{
          matrix.bashTarVersion }}
      - name: run unit tests
        run: |
          ./test.sh --version
          SKIP_BUILD=1 ./test.sh --formatter junit -r tests | tee ./logs/junit.xml
          echo "results:"
          cat ./logs/junit.xml
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: logs/junit.xml
