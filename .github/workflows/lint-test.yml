---
# Lint the code base and launch unit test at each push or pull request
name: Lint and test
on:
  push:
  workflow_dispatch:

jobs:
  linters:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: true
      matrix:
        vendor:
          - ubuntu
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - uses: ouzi-dev/commit-status-updater@v2
        with:
          name: lint
          status: pending

      - name: Linting - Dockerfile
        run: |
          set -exo pipefail
          ./bin/dockerLint | tee logs/docker-checkstyle.xml

      - name: Linting - Shellcheck
        run: |
          set -exo pipefail
          ./bin/shellcheckLint -f checkstyle | \
            tee logs/shellcheck-checkstyle.xml

      - name: Linting - Framework
        run:
          ./bin/frameworkLint -f checkstyle | tee logs/framework-checkstyle.xml

      - name: Linting - Awk
        run: |
          set -exo pipefail
          ./bin/awkLint | tee logs/awk-checkstyle.xml

      - name: build bin files + check md5
        run: |
          set -exo pipefail
          ./bin/buildBinFiles 2>&1 | tee logs/buildBinFiles.log

      - name: Checkstyle aggregation
        uses: adore-me/checkstyle-github-action@master
        with:
          path: 'logs/*-checkstyle.xml'

      - name: Archive results
        uses: actions/upload-artifact@v3
        with:
          name: linter-reports
          path: |
            logs/*.xml
            logs/*.log

      - uses: ouzi-dev/commit-status-updater@v2
        if: always()
        with:
          name: lint
          status: ${{ job.status }}

  buildDockerImagesAndTest:
    needs: linters
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: true
      matrix:
        vendor:
          - ubuntu
          - alpine
        bashTarVersion:
          - '4.4'
          - '5.0'
          - '5.1'
        include:
          - vendor: ubuntu
            bashImage: ubuntu:20.04
            options: -j 30
          - vendor: alpine
            bashTarVersion: 4.4
            bashImage: amd64/bash:4.4-alpine3.18
            # when using 8 jobs, junit report.xml is empty
            options: -j 30
          - vendor: alpine
            bashTarVersion: 5.0
            bashImage: amd64/bash:5.0-alpine3.18
            # when using 8 jobs, junit report.xml is empty
            options: -j 30
          - vendor: alpine
            bashTarVersion: 5.1
            bashImage: amd64/bash:5.1-alpine3.18
            # when using 8 jobs, junit report.xml is empty
            options: -j 30

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: ouzi-dev/commit-status-updater@v2
        with:
          name: build bash-tools-${{matrix.vendor}}-${{matrix.bashTarVersion}}
          status: pending

      - name: Pull/Build/Push docker image
        env:
          BRANCH: ${{ github.ref }}
          PUSH: push
        run: |
          ./bin/buildPushDockerImages "${{matrix.vendor}}" \
            "${{matrix.bashTarVersion}}" "${{matrix.bashImage}}" "${BRANCH}" \
            "${PUSH}"

      - name: Check image
        run: |
          docker run --rm \
            "bash-tools-${{matrix.vendor}}-${{matrix.bashTarVersion}}" bash \
            --version

      - name: run unit tests
        run: |
          chmod -R 777 logs
          # shellcheck disable=SC2266
          VENDOR="${{ matrix.vendor }}" \
          BASH_TAR_VERSION="${{ matrix.bashTarVersion }}" \
          BASH_IMAGE="${{ matrix.bashImage }}" \
          USER_ID=1000 \
          GROUP_ID=1000 \
          SKIP_BUILD=0 \
          ./bin/test ${{matrix.options}} --report-formatter junit -o logs -r src --ci

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Test Results ${{matrix.vendor}} ${{matrix.bashTarVersion}}
          path: logs/report.xml

      - uses: ouzi-dev/commit-status-updater@v2
        if: always()
        with:
          name: build bash-tools-${{matrix.vendor}}-${{matrix.bashTarVersion}}
          status: ${{ job.status }}

  publishTestResults:
    name: 'Publish Tests Results'
    if: ${{ always() }}
    needs: [linters, buildDockerImagesAndTest]
    runs-on: ubuntu-latest
    permissions:
      checks: write

      # needed by ouzi-dev/commit-status-updater@v2
      statuses: write

      # only needed unless run with comment_mode: off
      pull-requests: write
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          junit_files: 'artifacts/**/*.xml'

      - uses: ouzi-dev/commit-status-updater@v2
        with:
          name: build
