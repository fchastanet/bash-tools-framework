---
# Lint the code base and launch unit test at each push or pull request
name: Lint and test
on: # yamllint disable-line rule:truthy
  push:
    # execute when pushing only branches, not tags
    branches:
      - '**'
      # avoid infinite loop for auto created PRs
      - 'update/pre-commit-*'
    tags:
      - '*'
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  # Apply linter fixes configuration
  # When active, APPLY_FIXES must also be defined as
  # environment variable (in github/workflows/mega-linter.yml
  # or other CI tool)
  APPLY_FIXES: all
  # Decide which event triggers application of fixes in a
  # commit or a PR (pull_request, push, all)
  APPLY_FIXES_EVENT: all
  # If APPLY_FIXES is used, defines if the fixes are
  # directly committed (commit) or posted in a PR (pull_request)
  APPLY_FIXES_MODE: pull_request
  # variables to compute complex conditions
  COND_UPDATED_SOURCES: false
  COND_APPLY_FIXES_NEEDED: false

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      # needed by ouzi-dev/commit-status-updater@v2
      statuses: write
      # needed by mikepenz/action-junit-report@v4
      checks: write
    strategy:
      fail-fast: true
      matrix:
        vendor:
          - ubuntu
          #- alpine
        bashTarVersion:
          #- '4.4'
          #- '5.0'
          - '5.1'
        include:
          # - vendor: ubuntu
          #   bashImage: ubuntu:20.04
          #   batsOptions: -j 30
          #   bashTarVersion: 4.4
          #   runPrecommitTests: false
          #   dockerfile: .docker/Dockerfile.ubuntu
          # - vendor: ubuntu
          #   bashImage: ubuntu:20.04
          #   bashTarVersion: 5.0
          #   batsOptions: -j 30
          #   runPrecommitTests: false
          #   dockerfile: .docker/Dockerfile.ubuntu
          - vendor: ubuntu
            bashImage: ubuntu:20.04
            bashTarVersion: 5.1
            batsOptions: -j 30
            runPrecommitTests: true
            dockerfile: .docker/Dockerfile.ubuntu
          # - vendor: alpine
          #   bashTarVersion: 4.4
          #   bashImage: amd64/bash:4.4-alpine3.18
          #   batsOptions: -j 30 --filter-tags '!ubuntu_only'
          #   runPrecommitTests: false
          #   dockerfile: .docker/Dockerfile.alpine
          # - vendor: alpine
          #   bashTarVersion: 5.0
          #   bashImage: amd64/bash:5.0-alpine3.18
          #   batsOptions: -j 30 --filter-tags '!ubuntu_only'
          #   runPrecommitTests: false
          #   dockerfile: .docker/Dockerfile.alpine
          # - vendor: alpine
          #   bashTarVersion: 5.1
          #   bashImage: amd64/bash:5.1-alpine3.18
          #   batsOptions: -j 30 --filter-tags '!ubuntu_only'
          #   runPrecommitTests: false
          #   dockerfile: .docker/Dockerfile.alpine
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: crazy-max/ghaction-import-gpg@v5
        if: ${{ matrix.runPrecommitTests && success() }}
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - uses: tibdex/github-app-token@v1
        if: ${{ matrix.runPrecommitTests && success() }}
        id: generate-token
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - uses: ouzi-dev/commit-status-updater@v2
        with:
          name: build-bash-tools
          status: pending

      # -------------------------------------------------------
      # Build Image
      # -------------------------------------------------------

      - uses: ouzi-dev/commit-status-updater@v2
        with:
          name: build-bash-tools-${{matrix.vendor}}-${{matrix.bashTarVersion}}
          status: pending

      - name: Set env vars
        id: vars
        # shellcheck disable=SC2129
        run: |
          (
            echo "job_tag=${{github.run_id}}-${{matrix.vendor}}-${{matrix.bashTarVersion}}"
            echo "image_tag=bash-tools-${{matrix.vendor}}-${{matrix.bashTarVersion}}"
            echo "image_name=scrasnups/build"
            echo "branch_name=${GITHUB_REF##*/}"
          ) >> "${GITHUB_ENV}"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{env.image_name}}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - uses: docker/build-push-action@v5
        continue-on-error: false
        with:
          load: true
          context: .docker
          file: '${{ matrix.dockerfile }}'
          pull: true
          github-token: ${{ github.token }}
          tags: |
            ${{ env.image_name }}:${{ env.image_tag }}
          build-args: |
            BASH_IMAGE: "${{ matrix.bashImage }}"
            BASH_TAR_VERSION: "${{ matrix.bashTarVersion }}"
          cache-from: |
            type=gha,ref=${{ env.image_name }}:${{ env.image_tag }}
            type=registry,ref=${{ env.image_name }}:${{ env.image_tag }}

      - name: Check image
        continue-on-error: false
        run: |
          docker run --rm "${{ env.image_name }}:${{ env.image_tag }}" bash --version

      - uses: docker/build-push-action@v5
        continue-on-error: false
        with:
          load: true
          context: .docker
          file: '${{ matrix.dockerfile }}'
          push: true
          github-token: ${{ github.token }}
          tags: |
            ${{ env.image_name }}:${{ env.image_tag }}
            ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-to: type=gha,mode=max

      - uses: ouzi-dev/commit-status-updater@v2
        with:
          name: build-bash-tools-${{matrix.vendor}}-${{matrix.bashTarVersion}}
          status: ${{ job.status }}

      # -------------------------------------------------------
      # Lint only if pre-commit
      # -------------------------------------------------------

      - name: Cache virtualenv
        uses: actions/cache@v3
        if: ${{ matrix.runPrecommitTests }}
        with:
          path: ~/.virtualenvs
          key: >-
            ${{ runner.os }}-venv-${{
              hashFiles('**/requirements.*') }}

      - name: Set up Python
        if: ${{ matrix.runPrecommitTests }}
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Install pre-commit
        if: ${{ matrix.runPrecommitTests }}
        run: pip install pre-commit

      - uses: mfinelli/setup-shfmt@v3
        if: ${{ matrix.runPrecommitTests }}

      - uses: ouzi-dev/commit-status-updater@v2
        if: ${{ matrix.runPrecommitTests }}
        with:
          name: lint
          status: pending

      - name: Run pre-commit
        continue-on-error: true
        uses: pre-commit/action@v3.0.1
        id: preCommit
        if: ${{ matrix.runPrecommitTests }}
        with:
          extra_args: >-
            -c .pre-commit-config-github.yaml -a --hook-stage manual

      - name: MegaLinter
        id: ml
        continue-on-error: true
        if: ${{ matrix.runPrecommitTests && always() }}
        # You can override MegaLinter flavor used to have faster performances
        # More info at https://megalinter.io/flavors/
        uses: oxsecurity/megalinter/flavors/terraform@v7
        # All available variables are described in documentation
        # https://megalinter.io/configuration/
        env:
          # Validates all source when push on main,
          # else just the git diff with main.
          # Override with true if you always want to lint all sources
          VALIDATE_ALL_CODEBASE: >-
            ${{
              github.event_name == 'push' &&
              github.ref == 'refs/heads/main'
            }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MEGALINTER_CONFIG: .mega-linter-githubAction.yml

      - name: Upload MegaLinter artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: MegaLinter reports
          path: |
            megalinter-reports
            mega-linter.log

      - name: MegaLinter/Precommit has updated sources
        if: >
          steps.preCommit.outcome == 'failure' || (
            steps.ml.outputs.has_updated_sources == 1 && (
              env.APPLY_FIXES_EVENT == 'all' ||
              env.APPLY_FIXES_EVENT == github.event_name
            )
          )
        run: |
          echo "COND_UPDATED_SOURCES=true" >> "${GITHUB_ENV}"

      - name: is apply fixes needed ?
        if: >
          env.APPLY_FIXES_MODE == 'pull_request' && (
            github.event_name == 'push' ||
            github.event.pull_request.head.repo.full_name ==
            github.repository
          )
        run: |
          echo "COND_APPLY_FIXES_NEEDED=true" >> "${GITHUB_ENV}"

      - name: Create Pull Request
        id: cpr
        if: >
          matrix.runPrecommitTests &&
          env.COND_UPDATED_SOURCES == 'true' &&
          env.COND_APPLY_FIXES_NEEDED == 'true' &&
          !contains(github.event.head_commit.message, 'skip fix')
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ steps.generate-token.outputs.token }}
          committer: fchastanet <fchastanet@gmail.com>
          branch: update/pre-commit-fixes-${{ env.branch_name }}
          delete-branch: true
          title: lint fixes
          commit-message: Auto-update lint fixes
          body: |
            some auto fixes have been generated during pre-commit run
          labels: pre-commit-fixes

      - name: Print Pull request created
        if: |
          steps.cpr.outputs.pull-request-number &&
          steps.cpr.outcome == 'success'
        run: |
          echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"

      - uses: ouzi-dev/commit-status-updater@v2
        if: ${{  matrix.runPrecommitTests && always() }}
        with:
          name: lint
          status: ${{ job.status }}

      # -------------------------------------------------------
      # Run unit tests
      # -------------------------------------------------------
      - uses: ouzi-dev/commit-status-updater@v2
        if: ${{ steps.preCommit.conclusion == 'success' }}
        with:
          name: unit-tests-${{matrix.vendor}}-${{matrix.bashTarVersion}}
          status: pending

      - name: run unit tests
        id: unitTests
        if: ${{ steps.preCommit.conclusion == 'success' }}
        continue-on-error: true
        run: |
          set -o errexit
          chmod -R 777 logs
          # shellcheck disable=SC2266
          USER_ID=1000 \
          GROUP_ID=1000 \
          ./bin/test \
            -vvv \
            --vendor "${{matrix.vendor}}" \
            --bash-version "${{matrix.bashTarVersion}}" \
            --bash-base-image "${{matrix.bashImage}}" \
            --branch-name "${{ env.branch_name }}" \
            ${{matrix.batsOptions}} \
            --formatter junit -o logs -r src --ci 2>&1 |
            tee "logs/bats-${{ env.job_tag }}.log" || exit 1

          awk '/xml version="1.0"/{flag=1} flag; /<\/testsuites>/{flag=0}' \
            "logs/bats-${{ env.job_tag }}.log" >"logs/junit-${{ env.job_tag }}.xml"

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        # https://stackoverflow.com/a/70549615/3045926
        if: ${{ always() && steps.unitTests.conclusion == 'success' }}
        with:
          token: ${{ github.token }}
          check_name: JUnit ${{matrix.vendor}} Bash ${{matrix.bashTarVersion}}
          fail_on_failure: true
          require_tests: true
          require_passed_tests: true
          report_paths: 'logs/**.xml'

      - name: Upload Test Results
        if: ${{ always() && steps.unitTests.conclusion == 'success' }}
        uses: actions/upload-artifact@v4
        with:
          name: Test Results ${{matrix.vendor}} ${{matrix.bashTarVersion}}
          path: |
            logs/**

      - uses: ouzi-dev/commit-status-updater@v2
        if: ${{ steps.preCommit.conclusion == 'success' }}
        with:
          name: unit-tests-${{matrix.vendor}}-${{matrix.bashTarVersion}}
          status: ${{ job.status }}

  publishTestResults:
    name: 'Publish Tests Results'
    if: ${{ always() }}
    needs: [build]
    runs-on: ubuntu-22.04
    permissions:
      # needed by ouzi-dev/commit-status-updater@v2
      statuses: write

    steps:
      # run this action to get the workflow conclusion
      # You can get the conclusion via env (env.WORKFLOW_CONCLUSION)
      - uses: technote-space/workflow-conclusion-action@v3

      - uses: ouzi-dev/commit-status-updater@v2
        with:
          name: build-bash-tools
          # neutral, success, skipped, cancelled, timed_out, action_required, failure
          status: ${{ env.WORKFLOW_CONCLUSION }}
